{"version":3,"file":"okta-plugin-a11y.js","mappings":"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","sources":["webpack://OktaPluginA11y/webpack/universalModuleDefinition","webpack://OktaPluginA11y/./src/plugins/OktaPluginA11y.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OktaPluginA11y\"] = factory();\n\telse\n\t\troot[\"OktaPluginA11y\"] = factory();\n})(self, function() {\nreturn ","import { OktaSignInAPI } from '../types/api';\nimport { EventContext } from '../types/events';\n\nexport type OktaPluginA11yOptions = {\n  /**\n   * Used to set content-relevant page titles. Will set page title or call\n   * onTitleChange without companyName prefix if undefined, e.g., \"Reset\n   * Password\" instead of \"Acme - Reset Password\"\n   */\n  companyName?: string;\n\n  /**\n   * Callback for updating page title when widget content changes. Will update\n   * document.title if undefined.\n   */\n  onTitleChange?: (title: string) => void;\n}\n\n/**\n * Utility: Set attributes for DOM elements matching the CSS selector\n * @param selector css selector for dom element\n * @param attributes\n */\nfunction setAttr(selector: string, attributes: Record<string, string>) {\n  const elements = document.querySelectorAll(selector) || [];\n  const keys = Object.keys(attributes) || [];\n  elements.forEach((el) => {\n    keys.forEach((key) => {\n      el.setAttribute(key, attributes[key]);\n    })\n  });\n}\n\n/**\n * Utility: Converts a string to Title Case\n * @param str string to convert\n * @returns\n */\nfunction toTitleCase(str?: string) {\n  return !str\n    ? ''\n    : str.replace(/[_ ]/g, '-').split('-')\n      .map((word) => word[0].toUpperCase() + word.substring(1))\n      .join(' ');\n}\n\n/**\n * Pages with \"resend\" links/buttons that appear after a delay (default: 30s),\n * e.g., \"Resend email\", \"Resend SMS\"\n */\nconst RESEND_PAGES = [\n  {\n    controller: 'mfa-verify-passcode',\n    formName: 'challenge-authenticator',\n    authenticatorKey: 'phone_number',\n    methodType: 'sms',\n  },\n  {\n    controller: \"enroll-email\",\n    formName: \"enroll-authenticator\",\n    authenticatorKey: \"okta_email\",\n    methodType: \"email\"\n  },\n  {\n    controller: \"mfa-verify\",\n    formName: \"challenge-poll\",\n    authenticatorKey: \"okta_verify\",\n    methodType: \"push\"\n  },\n  {\n    controller: \"forgot-password\",\n    formName: \"identify-recovery\"\n  },\n];\n\n\n/**\n * Utility getTitle\n * @param param event context, passed to \"afterRender\" callback\n * @returns\n */\nfunction getTitle ({\n  controller,\n  formName,\n  authenticatorKey,\n  methodType\n}: EventContext) {\n  const map = [\n    {\n      tester: controller === 'primary-auth' && formName === 'identify',\n      title: `Sign in`,\n    },\n    {\n      tester: controller === 'registration',\n      title: `Sign up`,\n    },\n    {\n      tester: controller === 'forgot-password',\n      title: `Reset password`,\n    },\n    {\n      tester: formName === 'select-authenticator-authenticate',\n      title: `Select authenticator`\n    },\n    {\n      tester: formName === 'select-authenticator-enroll',\n      title: `Set up security authenticators`\n    },\n\n    {\n      tester: formName === 'authenticator-verification-data'\n      && methodType === 'sms',\n      title: `Verify with phone SMS`\n    },\n    {\n      tester: controller === 'mfa-verify-passcode'\n      && formName === 'challenge-authenticator'\n      && methodType === 'voice',\n      title: `Verify with phone voice call`\n    },\n    {\n      tester: /^enroll-/.test(controller)\n        && formName === 'enroll-authenticator',\n      title: `Set up ${methodType} authenticator`\n    },\n    {\n      tester: formName === 'enroll-poll',\n      title: `Set up ${toTitleCase(authenticatorKey)}`\n    },\n    {\n      tester: /^mfa-verify-/.test(controller)\n        && formName === 'challenge-authenticator',\n      title: `Verify using ${methodType} authenticator`\n    },\n    {\n      tester: formName === 'authenticator-verification-data',\n      title: `Verify using ${methodType} authenticator`\n    },\n    {\n      tester: controller === 'mfa-verify-webauthn'\n        && formName === 'challenge-authenticator'\n        && methodType === 'webauthn',\n      title: `Verify using security key or biometric authenticator`\n    },\n    {\n      tester: controller === 'mfa-verify'\n        && formName === 'challenge-authenticator'\n        && methodType === 'totp',\n      title: `Verify using Okta Verify code`\n    },\n    {\n      tester: controller === 'mfa-verify'\n        && formName === 'challenge-authenticator'\n        && methodType === 'push',\n      title: `Verify using Okta Verify push`\n    },\n    {\n      tester: controller === 'mfa-verify'\n        && formName === 'challenge-poll'\n        && methodType === 'push',\n      title: `Verify using Okta Verify push`\n    },\n  ];\n\n  // find a matching title\n  const match = map.find(({ tester }) => tester);\n  return (match && match.title) || toTitleCase(formName || controller || '');\n}\n\n/**\n * Cheap check for shallow equality\n * @param a object\n * @param b object\n * @returns true if shallow-equal, false otherwise\n */\nconst isEqual = (a,b) => [...Object.keys(a)].every((k) => a[k] === b[k]);\n\n/**\n * This plugin improves the accessibility (a11y) of the Okta sign in widget to\n * comply with WCAG2.1AA (https://www.w3.org/TR/WCAG21/) standards and Section\n * 508 (https://www.section508.gov/)\n *\n * @param widget instance of OktaSignIn\n * @param options options for a11y plugin\n */\nexport const init = (widget: OktaSignInAPI, options?: OktaPluginA11yOptions): void => {\n  // parse options\n  const { companyName, onTitleChange } = options ?? {};\n  \n  /**\n   * Register a new afterRender event callback, see\n   * https://github.com/okta/okta-signin-widget#afterrender\n   */\n  widget.on('afterRender', function (context: EventContext) {\n    const title = companyName ? `${companyName} - ${getTitle(context)}` : getTitle(context);\n    // NOTE: for customer-hosted scenarios, do NOT set page title!\n    if (onTitleChange) {\n      onTitleChange(title);\n    } else {\n      document.title = title;\n    }\n\n    // NOTE: when verifying with an existing (i.e., already enrolled) authenticator\n    if (context.formName === 'select-authenticator-authenticate') {\n      // set aria-label for auth coins\n      setAttr('.mfa-custom-app-logo',        { 'aria-label': 'Verify using custom push app' });\n      setAttr('.mfa-custom-factor',          { 'aria-label': 'Verify using custom IDP Authenticator' });\n      setAttr('.mfa-duo',                    { 'aria-label': 'Verify using Duo Security' });\n      setAttr('.mfa-google-auth',            { 'aria-label': 'Verify using Google Authenticator' });\n      setAttr('.mfa-hotp',                   { 'aria-label': 'Verify using Custom OTP' });\n      setAttr('.mfa-okta-email',             { 'aria-label': 'Verify using email' });\n      setAttr('.mfa-okta-password',          { 'aria-label': 'Verify using password' });\n      setAttr('.mfa-okta-phone',             { 'aria-label': 'Verify using phone' }); // TODO read last-4 digis\n      setAttr('.mfa-okta-security-question', { 'aria-label': 'Verify using Security Question' });\n      setAttr('.mfa-okta-verify',            { 'aria-label': 'Verify using Okta Verify' });\n      setAttr('.mfa-onprem',                 { 'aria-label': 'Verify using Custom On-prem' });\n      setAttr('.mfa-rsa',                    { 'aria-label': 'Verify using RSA SecurID' });\n      setAttr('.mfa-symantec',               { 'aria-label': 'Verify using Symantec VIP' });\n      setAttr('.mfa-webauthn',               { 'aria-label': 'Verify using Security key or Biometric Authenticator' });\n      setAttr('.mfa-yubikey',                { 'aria-label': 'Verify using Yubikey' });\n\n      // set aria-label for buttons\n      setAttr('.authenticator-button[data-se=\"custom_otp\"] a',        { 'aria-label': 'Verify using Custom OTP' });\n      setAttr('.authenticator-button[data-se=\"duo\"] a',               { 'aria-label': 'Verify using Duo Security' });\n      setAttr('.authenticator-button[data-se=\"external_idp\"] a',      { 'aria-label': 'Verify using IDP Authenticator' });\n      setAttr('.authenticator-button[data-se=\"google_otp\"] a',        { 'aria-label': 'Verify using Google Authenticator' });\n      setAttr('.authenticator-button[data-se=\"okta_email\"] a',        { 'aria-label': 'Verify using email' });\n      setAttr('.authenticator-button[data-se=\"okta_password\"] a',     { 'aria-label': 'Verify using password' });\n      setAttr('.authenticator-button[data-se=\"okta_verify-push\"] a',  { 'aria-label': 'Verify using Okta Verify (Push Notification)' });\n      setAttr('.authenticator-button[data-se=\"okta_verify-totp\"] a',  { 'aria-label': 'Verify using Okta Verify (Code)' });\n      setAttr('.authenticator-button[data-se=\"okta_verify\"] a',       { 'aria-label': 'Verify using Okta Verify' });\n      setAttr('.authenticator-button[data-se=\"onprem_mfa-otp\"] a',    { 'aria-label': 'Verify using custom on-prem authenticator' });\n      setAttr('.authenticator-button[data-se=\"phone_number\"] a',      { 'aria-label': 'Verify using phone' });\n      setAttr('.authenticator-button[data-se=\"rsa_token-otp\"] a',     { 'aria-label': 'Verify using RSA SecurID' });\n      setAttr('.authenticator-button[data-se=\"security_question\"] a', { 'aria-label': 'Verify using security question' });\n      setAttr('.authenticator-button[data-se=\"symantec_vip\"] a',      { 'aria-label': 'Verify using Symantec VIP' });\n      setAttr('.authenticator-button[data-se=\"webauthn\"] a',          { 'aria-label': 'Verify using Security key or Biometric Authenticator' });\n      setAttr('.authenticator-button[data-se=\"yubikey_token\"] a',     { 'aria-label': 'Verify using Yubikey' });\n    }\n\n    // NOTE: when enrolling a new authenticator\n    if (context.formName === 'select-authenticator-enroll') {\n      // set aria-label for auth coins\n      setAttr('.mfa-custom-app-logo',        { 'aria-label': 'Enroll custom push app' });\n      setAttr('.mfa-custom-factor',          { 'aria-label': 'Enroll custom IDP Authenticator' });\n      setAttr('.mfa-duo',                    { 'aria-label': 'Enroll Duo Security' });\n      setAttr('.mfa-google-auth',            { 'aria-label': 'Enroll Google Authenticator' });\n      setAttr('.mfa-hotp',                   { 'aria-label': 'Enroll Custom OTP' });\n      setAttr('.mfa-okta-email',             { 'aria-label': 'Enroll email' });\n      setAttr('.mfa-okta-password',          { 'aria-label': 'Enroll password' });\n      setAttr('.mfa-okta-phone',             { 'aria-label': 'Enroll phone' }); // TODO read last-4 digis\n      setAttr('.mfa-okta-security-question', { 'aria-label': 'Enroll Security Question' });\n      setAttr('.mfa-okta-verify',            { 'aria-label': 'Enroll Okta Verify' });\n      setAttr('.mfa-onprem',                 { 'aria-label': 'Enroll Custom On-prem' });\n      setAttr('.mfa-rsa',                    { 'aria-label': 'Enroll RSA SecurID' });\n      setAttr('.mfa-symantec',               { 'aria-label': 'Enroll Symantec VIP' });\n      setAttr('.mfa-webauthn',               { 'aria-label': 'Enroll Security key or Biometric Authenticator' });\n      setAttr('.mfa-yubikey',                { 'aria-label': 'Enroll Yubikey' });\n\n      // set aria-label for buttons\n      setAttr('.authenticator-button[data-se=\"custom_otp\"] a',        { 'aria-label': 'Enroll custom OTP' });\n      setAttr('.authenticator-button[data-se=\"duo\"] a',               { 'aria-label': 'Enroll Duo Security' });\n      setAttr('.authenticator-button[data-se=\"external_idp\"] a',      { 'aria-label': 'Enroll IDP Authenticator' });\n      setAttr('.authenticator-button[data-se=\"google_otp\"] a',        { 'aria-label': 'Enroll Google Authenticator' });\n      setAttr('.authenticator-button[data-se=\"okta_email\"] a',        { 'aria-label': 'Enroll email' });\n      setAttr('.authenticator-button[data-se=\"okta_password\"] a',     { 'aria-label': 'Enroll password' });\n      setAttr('.authenticator-button[data-se=\"okta_verify-push\"] a',  { 'aria-label': 'Enroll Okta Verify (Push Notification)' });\n      setAttr('.authenticator-button[data-se=\"okta_verify-totp\"] a',  { 'aria-label': 'Enroll Okta Verify (Code)' });\n      setAttr('.authenticator-button[data-se=\"okta_verify\"] a',       { 'aria-label': 'Enroll Okta Verify' });\n      setAttr('.authenticator-button[data-se=\"onprem_mfa-otp\"] a',    { 'aria-label': 'Enroll custom on-prem authenticator' });\n      setAttr('.authenticator-button[data-se=\"phone_number\"] a',      { 'aria-label': 'Enroll phone' });\n      setAttr('.authenticator-button[data-se=\"rsa_token-otp\"] a',     { 'aria-label': 'Enroll RSA SecurID' });\n      setAttr('.authenticator-button[data-se=\"security_question\"] a', { 'aria-label': 'Enroll security question' });\n      setAttr('.authenticator-button[data-se=\"symantec_vip\"] a',      { 'aria-label': 'Enroll Symantec VIP' });\n      setAttr('.authenticator-button[data-se=\"webauthn\"] a',          { 'aria-label': 'Enroll Security key or Biometric Authenticator' });\n      setAttr('.authenticator-button[data-se=\"yubikey_token\"] a',     { 'aria-label': 'Enroll Yubikey' });\n    }\n\n    // identify page autocomplete attrs\n    setAttr('input[name=\"identifier\"]', { autocomplete: 'username' });\n\n    // register page autocomplete attrs\n    setAttr('input[name=\"userProfile.email\"]', { autocomplete: 'email' });\n    setAttr('input[name=\"userProfile.lastName\"]', { autocomplete: 'family-name' });\n    setAttr('input[name=\"userProfile.firstName\"]', { autocomplete: 'given-name' });\n\n    document.querySelectorAll('.password-toggle')\n      .forEach((toggle) => {\n        const container = toggle.parentNode;\n        if (!container) {\n          // should not be reached\n          console.warn('Could not find parent node of \".password-toggle\"');\n          return;\n        }\n\n        // find the <input> element\n        const input = container?.querySelector<HTMLInputElement>('.password-with-toggle');\n\n        if (!input) {\n          // should not be reached\n          console.warn('Could not find input element \".password-with-toggle\"');\n          return;\n        }\n\n        // NOTE: replace <span> (non-interactive) elements with buttons to make\n        // them keyboard-focusable and set appropriate aria atttributes/roles\n        const children = [...toggle.children];\n        children.forEach((span) => toggle.removeChild(span)); // FIXME\n        const button = document.createElement('button');\n        const updateButton = () => {\n          const isVisible = input.type !== 'password';\n          button.type = 'button';\n          if (isVisible) {\n            button.ariaLabel = 'Hide password';\n            button.className = 'eyeicon visibility-off-16';\n          } else {\n            button.ariaLabel = 'Show password';\n            button.className = 'eyeicon visibility-16';\n          }\n        };\n        updateButton();\n        button.onclick = () => {\n          input.type = input.type === 'password' ? 'text' : 'password';\n          updateButton();\n        }\n        toggle.appendChild(button);\n      });\n\n\n    if (RESEND_PAGES.some(page => isEqual(page, context))) {\n      let count = 0;\n      const intervalWarning = setInterval(() => {\n        console.log('interval: infobox-warning')\n        if (document.querySelector('.infobox-warning')) {\n          document.querySelectorAll('.infobox-warning')\n            .forEach((box) => {\n              if (count === 0) {\n                // element already exists in DOM, just hidden, set aria\n                box.setAttribute('aria-live', 'assertive');\n              } else {\n                // remove\n                const parent = box.parentElement;\n                parent?.removeChild(box);\n                box.setAttribute('aria-live', 'assertive');\n                parent?.appendChild(box);\n              }\n            })\n          console.log('clearing interval: infobox-warning')\n          clearInterval(intervalWarning)\n        }\n        count++;\n      }, 1500);\n\n      const intervalResend = setInterval(() => {\n        if (document.querySelector('.resend-link')) {\n          console.log('interval: resend-link')\n          document.querySelectorAll('.resend-link')\n            .forEach((link) => link.setAttribute('href', 'javascript:void(0);'))\n          console.log('clearing interval: resend-link')\n          clearInterval(intervalResend)\n        }\n      }, 1500);\n    }\n  });\n}\n"],"names":["root","factory","exports","module","define","amd","self","setAttr","selector","attributes","elements","document","querySelectorAll","keys","Object","forEach","el","key","setAttribute","toTitleCase","str","replace","split","map","word","toUpperCase","substring","join","RESEND_PAGES","controller","formName","authenticatorKey","methodType","getTitle","match","tester","title","test","find","widget","options","companyName","onTitleChange","on","context","autocomplete","toggle","container","parentNode","input","querySelector","children","span","removeChild","button","createElement","updateButton","isVisible","type","ariaLabel","className","onclick","appendChild","some","page","a","b","every","k","count","intervalWarning","setInterval","box","parent","parentElement","clearInterval","intervalResend","link"],"sourceRoot":""}