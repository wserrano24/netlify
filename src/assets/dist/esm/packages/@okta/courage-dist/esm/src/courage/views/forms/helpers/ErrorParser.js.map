{"version":3,"file":"ErrorParser.js","sources":["../../../../../../../../../../../packages/@okta/courage-dist/esm/src/courage/views/forms/helpers/ErrorParser.js"],"sourcesContent":["import oktaUnderscore from '../../../util/underscore-wrapper.js';\nimport StringUtil from '../../../util/StringUtil.js';\n\nconst FIELD_REGEX = /^([\\S]+): (.+)$/;\nvar ErrorParser = {\n  /**\n   * Helper function that returns the json output of an xhr objext\n   * @param  {jqXhr} xhr\n   * @return {Object}\n   */\n  getResponseJSON: function (xhr) {\n    try {\n      return xhr.responseJSON || JSON.parse(xhr.responseText);\n    } catch (e) {// ignore error\n    }\n  },\n\n  /**\n   * Parses an error summary to extract a field name and an error message\n   * @param  {String} errorSummary The raw error summary\n   * @return {String[]} An array with two members: [field name, error message]\n   */\n  parseErrorSummary: function (errorSummary) {\n    const matches = errorSummary.match(FIELD_REGEX); // error format is: `fieldName: The field cannot be left blank`\n\n    if (matches) {\n      return [matches[1], matches[2]];\n    }\n  },\n\n  /**\n   * Parses an error cause object to extract a field name from property attribute\n   * and an error message form errorSummary attribute. It looks to see if there is\n   * a custom override/translation for the erorrCause.reason before using the errorSummary\n   * @param  {Object} errorCause object\n   * @return {String[]} An array with two members: [field name, error message]\n   */\n  parseErrorCauseObject: function (errorCause) {\n    if (errorCause.property && errorCause.errorSummary) {\n      const localizedMsg = StringUtil.localize(errorCause.reason);\n      const apiMsg = errorCause.errorSummary;\n      const field = errorCause.property;\n      const errorMessage = localizedMsg.indexOf('L10N_ERROR[') === -1 ? localizedMsg : apiMsg;\n      return [field, errorMessage];\n    }\n  },\n  parseErrors: function (resp) {\n    const responseJSON = this.getResponseJSON(resp);\n    return oktaUnderscore.map(responseJSON && responseJSON.errorCauses || [], function (errorCause) {\n      return ('' + errorCause.errorSummary).replace(FIELD_REGEX, '$2');\n    });\n  },\n\n  /**\n   * Parses the response for errors\n   * Returns a map of field names > array or error messages\n   * Example:\n   * ```javascript\n   * {\n   *   url: ['The field cannot be left blank', 'The field has to be a valid URI'],\n   *   name: ['The field cannot be left blank']\n   * }\n   * ```\n   * @param  {Object} resp\n   * @return {Object}\n   */\n  parseFieldErrors: function (resp) {\n    const responseJSON = this.getResponseJSON(resp);\n    const errors = {}; // xhr error object\n\n    if (responseJSON) {\n      /* eslint complexity: [2, 9] */\n      oktaUnderscore.each(responseJSON.errorCauses || [], function (cause) {\n        let res = [];\n\n        if (cause.property && cause.errorSummary) {\n          res = this.parseErrorCauseObject(cause);\n        } else if (cause.location && cause.errorSummary) {\n          // To handle new api error format for field level errors.\n          // Ignoring the reason attribute as the translation happens in the API layer and not in the client any more.\n          res = [cause.location, cause.errorSummary];\n        } else {\n          res = this.parseErrorSummary(cause && cause.errorSummary || '');\n        }\n\n        if (res) {\n          const fieldName = res[0];\n          const message = res[1];\n          errors[fieldName] || (errors[fieldName] = []);\n          errors[fieldName].push(message);\n        }\n      }, this);\n    } // validation key/value object\n    else if (oktaUnderscore.isObject(resp) && oktaUnderscore.size(resp)) {\n      oktaUnderscore.each(resp, function (msg, field) {\n        errors[field] = [msg];\n      });\n    }\n\n    return oktaUnderscore.size(errors) ? errors : undefined;\n  }\n};\n\nexport { ErrorParser as default };\n"],"names":["FIELD_REGEX","ErrorParser","getResponseJSON","xhr","responseJSON","JSON","parse","responseText","e","parseErrorSummary","errorSummary","matches","match","parseErrorCauseObject","errorCause","property","localizedMsg","StringUtil","localize","reason","apiMsg","field","errorMessage","indexOf","parseErrors","resp","oktaUnderscore","map","errorCauses","replace","parseFieldErrors","errors","each","cause","res","location","fieldName","message","push","isObject","size","msg","undefined"],"mappings":"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"}