{"version":3,"file":"SchemaFormFactory.js","sources":["../../../../../../../../../../../packages/@okta/courage-dist/esm/src/courage/views/forms/helpers/SchemaFormFactory.js"],"sourcesContent":["import oktaUnderscore from '../../../util/underscore-wrapper.js';\nimport StringUtil from '../../../util/StringUtil.js';\nimport BooleanSelect from '../inputs/BooleanSelect.js';\nimport TextBoxSet from '../inputs/TextBoxSet.js';\nimport EnumTypeHelper from './EnumTypeHelper.js';\n\n/* eslint max-statements: 0, max-params: 0 */\n\nfunction convertStringToNumber(string) {\n  const number = StringUtil.parseFloat(string);\n  return string === '' ? null : number;\n} // converts possibleValues to choices\n// [a, b, c] => {a: a, b: b, c: c}\n\n\nfunction getChoices(values) {\n  return oktaUnderscore.object(values, values);\n}\n\nfunction isArray(type) {\n  return type && type.indexOf('array') >= 0;\n} // A schema property may have an objectName either\n// at the root level or nested in the items object\n\n\nfunction getObjectName(schemaProp) {\n  const items = schemaProp.get('items');\n\n  if (items) {\n    return items.objectName;\n  }\n\n  return schemaProp.get('objectName');\n}\n/**\n * Checks the validity of a schema property.\n *\n * @param {SchemaProperty} [schemaProp] A schema property backbone model\n * @param {Object} [values] An object of the form { key: [value1, value2]}\n * @return {Boolean} true/false\n * @private\n */\n\n\nfunction isValidSchemaProp(schemaProp, values) {\n  const objectName = getObjectName(schemaProp);\n  const results = values[objectName]; // a schema property that references an empty list of values\n  // Im looking at you, google apps.\n\n  if (objectName && oktaUnderscore(results).isEmpty()) {\n    return false;\n  }\n\n  return true;\n} // Maps each __displayType__ to a basic set of inputOptions.\n\n\nfunction defaultOptions(property) {\n  const type = property.get('__displayType__');\n  const values = property.get('__possibleValues__');\n  const name = property.get('name');\n  const title = property.get('title');\n  /* eslint complexity: [2, 24] */\n\n  const inputOptions = {\n    type: 'text',\n    name: name,\n    label: title || name\n  }; // @see customOptions for enum complex \"object\" type,\n  // a.k.a \"object\" or \"arrayofobject\" type has enum values defined.\n  // Other cases (e.g., nested object type) are not support yet.\n\n  switch (type) {\n    case 'arrayofstring':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: 'string'\n      };\n      break;\n\n    case 'arrayofnumber':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: 'number'\n      };\n      break;\n\n    case 'arrayofinteger':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: 'integer'\n      };\n      break;\n\n    case 'arrayofobject':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: property.get('items').type\n      };\n      break;\n\n    case 'arrayofref-id':\n      inputOptions.input = TextBoxSet;\n      inputOptions.params = {\n        itemType: property.get('items').format\n      };\n      break;\n\n    case 'boolean':\n      inputOptions.input = BooleanSelect;\n      break;\n\n    case 'integer':\n    case 'number':\n      inputOptions.to = convertStringToNumber;\n      break;\n\n    case 'reference':\n      inputOptions.type = 'select';\n      inputOptions.options = getChoices(values);\n      break;\n\n    case 'image':\n      inputOptions.readOnly = true;\n\n      inputOptions.from = function (value) {\n        return oktaUnderscore.isEmpty(value) ? '' : StringUtil.localize('user.profile.image.image_set', 'courage'); // TODO\n      };\n\n      break;\n\n    case 'password':\n      inputOptions.type = 'password';\n      break;\n\n    case 'date':\n      inputOptions.type = 'date';\n      break;\n\n    case 'uri':\n    case 'country-code':\n    case 'country_code':\n    case 'language-code':\n    case 'language_code':\n    case 'email':\n    case 'locale':\n    case 'timezone':\n    case 'string':\n    case 'object':\n      // default input options\n      break;\n\n    default:\n      throw new Error(`unknown type: ${type}`);\n  }\n\n  return inputOptions;\n} // Sets nonbasic inputOptions, such as an array with possible values\n\n\nfunction customOptions(property) {\n  let inputOptions = {};\n  const name = property.get('name');\n  const type = property.get('__displayType__');\n  const values = property.get('__possibleValues__');\n  const prefix = property.get('__fieldNamePrefix__');\n\n  if (prefix) {\n    inputOptions.name = prefix + name;\n    inputOptions.errorField = name;\n  }\n\n  if (property.isEnumType()) {\n    const configs = {\n      displayType: type,\n      title: property.get('title'),\n      enumValues: property.getEnumValues()\n    };\n    inputOptions = oktaUnderscore.extend({}, EnumTypeHelper.getEnumInputOptions(configs), inputOptions);\n  } else if (isArray(type) && values) {\n    inputOptions.type = 'checkboxset';\n    inputOptions.input = null;\n    inputOptions.options = getChoices(values);\n  }\n\n  return inputOptions;\n}\n\nfunction augmentSchemaProp(schemaProp, possibleValues, profile) {\n  const name = schemaProp.get('name');\n  const prefix = profile.__nestedProperty__;\n  let defaultValues = possibleValues[name];\n  const userValues = profile.get(name);\n  let values; // If API responds with a field name that differs from the form-field name\n  // example: Model's 'profile.username' vs. server's 'username'\n\n  if (prefix) {\n    schemaProp.set('__fieldNamePrefix__', prefix);\n  } // case 1: objectName - fixed list of values are set for the input\n\n\n  const fixedValues = possibleValues[getObjectName(schemaProp)]; // case 2: name only - default list of values are provided, user can add more\n  // TODO: this case does not yet exist, so it is not tested\n\n  if (defaultValues && userValues) {\n    defaultValues = oktaUnderscore.union(defaultValues, userValues);\n  } // If both fixed and default values exist,\n  // take the fixed values unless they are empty\n\n\n  if (fixedValues && fixedValues.length) {\n    values = fixedValues;\n  } else if (defaultValues && defaultValues.length) {\n    values = defaultValues;\n  }\n\n  schemaProp.set('__possibleValues__', values);\n}\n\nfunction augmentSchemaProps(schemaProps, possibleValues, profile) {\n  schemaProps.each(function (schemaProp) {\n    augmentSchemaProp(schemaProp, possibleValues, profile);\n  });\n  return schemaProps;\n}\n/**\n * Remove invalid schema properties from a collection\n *\n * @param {SchemaProperties Collection} [properties] A collection of schema properties\n * @param {Object} [values] An object of the form { key: [value1, value2]}\n * @return {Array} An array of valid schema models, this can be used to reset\n * a schema properties collection for example.\n * @private\n */\n\n\nfunction cleanSchema(properties, values) {\n  return properties.filter(function (schema) {\n    return isValidSchemaProp(schema, values);\n  });\n}\n\nvar SchemaFormFactory = {\n  /**\n   * Creates the options hash for BaseForm.addInput from a prepared schema\n   * property.\n   *\n   * @param {Okta.Model} [preparedSchemaProp] A schema property backbone model\n   * that has been standardized by the prepareSchema method.\n   * @return {Object} An object containing all of the options needed by\n   * BaseForm's addInput()\n   */\n  createInputOptions: function (preparedSchemaProp) {\n    const custom = customOptions(preparedSchemaProp);\n    const standard = defaultOptions(preparedSchemaProp); // underscore did not support nested extend\n    // https://github.com/jashkenas/underscore/issues/162\n\n    if (custom.params && standard.params) {\n      custom.params = oktaUnderscore.defaults(custom.params, standard.params);\n    }\n\n    return oktaUnderscore.defaults(custom, standard);\n  },\n  hasValidSchemaProps: function (schemaProps, possibleValues) {\n    if (oktaUnderscore.isEmpty(schemaProps)) {\n      return false;\n    }\n\n    const validSchema = cleanSchema(schemaProps, possibleValues);\n    return !!validSchema.length;\n  },\n\n  /**\n   * This method is responsible for preparing a collection for the form\n   * factory to use by putting all of the information to create an input\n   * into the schema property and removing invalid properties.\n   * The typical UD form takes 3 models:\n   * The data model has the input values.\n   * The schema model describes which input to use, such as a textbox or a checkbox.\n   * The possible values model provide a list of default options to display, for example in a drop down menu.\n   *\n   * @param {SchemaProperty Collection} [schemaProps] A schema property backbone model.\n   * @param {Object} [possibleValues] An object of the form { key: [value1, value2]}\n   * @param {Okta.Model} [profile] A backbone model containing the property described by the schema property.\n   * @return {SchemaProperty Collection} A schema property collection with standardized models.\n   * The standard schema model adds a couple of additional private properties to\n   * allow the form factory to reference lookup values or name prefixes without going to a second model.\n   */\n  prepareSchema: function (schemaProps, possibleValues, profile) {\n    schemaProps.reset(cleanSchema(schemaProps, possibleValues));\n    return augmentSchemaProps(schemaProps, possibleValues, profile);\n  },\n\n  /**\n   * `prepareSchema` will reset the property list which may not be necessary at some case.\n   * like when setting default value for schema properties.\n   * (more detail about such case @see wiki UX, App+Entitlements+for+Provisioning)\n   *\n   * @param { }\n   * @return {String}\n   */\n  augmentSchemaProps: augmentSchemaProps,\n  augmentSchemaProp: augmentSchemaProp\n};\n\nexport { SchemaFormFactory as default };\n"],"names":["convertStringToNumber","string","number","StringUtil","parseFloat","getChoices","values","oktaUnderscore","object","isArray","type","indexOf","getObjectName","schemaProp","items","get","objectName","isValidSchemaProp","results","isEmpty","defaultOptions","property","name","title","inputOptions","label","input","TextBoxSet","params","itemType","format","BooleanSelect","to","options","readOnly","from","value","localize","Error","customOptions","prefix","errorField","isEnumType","configs","displayType","enumValues","getEnumValues","extend","EnumTypeHelper","getEnumInputOptions","augmentSchemaProp","possibleValues","profile","__nestedProperty__","defaultValues","userValues","set","fixedValues","union","length","augmentSchemaProps","schemaProps","each","cleanSchema","properties","filter","schema","SchemaFormFactory","createInputOptions","preparedSchemaProp","custom","standard","defaults","hasValidSchemaProps","validSchema","prepareSchema","reset"],"mappings":"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"}