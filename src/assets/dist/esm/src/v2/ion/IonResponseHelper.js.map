{"version":3,"file":"IonResponseHelper.js","sources":["../../../../../src/v2/ion/IonResponseHelper.js"],"sourcesContent":["/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { _ } from 'okta';\nimport { getMessage, getMessageKey } from './i18nTransformer';\n\nconst convertErrorMessageToErrorSummary = (formName, remediationValues = []) => {\n  return _.chain(remediationValues)\n    .filter(field => {\n      return Array.isArray(field.messages?.value) && field.messages.value.length;\n    })\n    .map(field => {\n      return {\n        property: formName ? `${formName}.${field.name}` : field.name,\n        errorSummary: field.messages.value.map(getMessage),\n        errorKey: field.messages.value.map(getMessageKey),\n      };\n    })\n    .value();\n};\n\n/**\n * Although time complexity is O(n^2),\n * the `array` is actually very small (size < 5),\n * hence performance doesn't matter.\n */\nconst uniqWith = (array, comparator) => {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n  if (!_.isFunction(comparator) || array.length === 1) {\n    return array;\n  }\n\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    let seen = false;\n    for (let j = i + 1; j < array.length; j++) {\n      /* eslint max-depth: [2, 3] */\n      if (comparator(array[i], array[j])) {\n        seen = true;\n        break;\n      }\n    }\n    if (!seen) {\n      result.push(array[i]);\n    }\n  }\n\n  return result;\n};\n\n/**\n * returns errors\n * @example\n * errors = [\n *   {property : fieldName1, errorSummary: [errorMessage1]},\n *   {property : fieldName2, errorSummary: [errorMessage2]}\n *   {property : fieldName3, errorSummary: [errorMessage31, errorMessage32]}\n * ]\n */\nconst getRemediationErrors = (res) => {\n  let errors = [];\n\n  if (!res.remediation || !Array.isArray(res.remediation.value) || res.remediation.value.length === 0) {\n    return errors;\n  }\n  let remediationFormFields = res.remediation.value[0].value;\n\n  if (!Array.isArray(remediationFormFields)) {\n    return errors;\n  }\n\n  // error at field\n  errors.push(convertErrorMessageToErrorSummary(null, remediationFormFields));\n\n  _.each(remediationFormFields, (remediationForm) => {\n    const formName = remediationForm.name;\n\n    // error at form.value\n    if (Array.isArray(remediationForm.form?.value)) {\n      errors.push(convertErrorMessageToErrorSummary(formName, remediationForm.form.value));\n    }\n\n    // error at option.value.form.value\n    if (Array.isArray(remediationForm.options)) {\n      _.each(remediationForm.options, (option) => {\n        if (Array.isArray(option.value?.form?.value)) {\n          errors.push(convertErrorMessageToErrorSummary(formName, option.value.form.value));\n        }\n      });\n    }\n  });\n\n  // API may return identical error on same field\n  // thus run through `uniqWith`.\n  // Check unit test for details.\n  return uniqWith(_.flatten(errors), _.isEqual);\n};\n\n/**\n * return global error summary combined into one string\n * allErrors = 'error string1. error string2'\n */\nconst getGlobalErrors = (res) => {\n  let allErrors = [];\n\n  if (Array.isArray(res.messages?.value)) {\n    allErrors = res.messages.value.map(getMessage);\n  }\n\n  return allErrors.join('. ');\n};\n\n/**\n * return array of error keys\n */\nconst getGlobalErrorKeys = (res) => {\n  let allKeys = [];\n\n  if (Array.isArray(res.messages?.value)) {\n    allKeys = res.messages.value.map(getMessageKey);\n  }\n\n  return allKeys;\n};\n\nconst convertFormErrors = (response) => {\n  let errors = {\n    errorCauses: getRemediationErrors(response),\n    errorSummary: getGlobalErrors(response),\n    errorSummaryKeys: getGlobalErrorKeys(response),\n    errorIntent: response.intent,\n  };\n\n  return {\n    responseJSON: errors\n  };\n};\n\nconst isIonErrorResponse = (response = {}) => {\n  // check if error format is an ION response by looking for version attribute.\n  // a little sloppy.\n  return response.version;\n};\n\nconst isIdxSessionExpiredError = (response) => {\n  const errorI18NKey = response?.context?.messages?.value[0]?.i18n?.key;\n  return errorI18NKey && errorI18NKey === 'idx.session.expired';\n};\n\nexport default {\n  convertFormErrors,\n  isIonErrorResponse,\n  isIdxSessionExpiredError\n};\n"],"names":["convertErrorMessageToErrorSummary","formName","remediationValues","_","chain","filter","field","Array","isArray","messages","value","length","map","property","name","errorSummary","getMessage","errorKey","getMessageKey","uniqWith","array","comparator","isFunction","result","i","seen","j","push","getRemediationErrors","res","errors","remediation","remediationFormFields","each","remediationForm","form","options","option","flatten","isEqual","getGlobalErrors","allErrors","join","getGlobalErrorKeys","allKeys","convertFormErrors","response","errorCauses","errorSummaryKeys","errorIntent","intent","responseJSON","isIonErrorResponse","version","isIdxSessionExpiredError","errorI18NKey","context","i18n","key"],"mappings":"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"}