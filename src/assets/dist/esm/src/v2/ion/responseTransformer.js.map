{"version":3,"file":"responseTransformer.js","sources":["../../../../../src/v2/ion/responseTransformer.js"],"sourcesContent":["/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { _ } from 'okta';\nimport { FORMS as RemediationForms, AUTHENTICATOR_KEY, IDP_FORM_TYPE } from './RemediationConstants';\n\n/**\n * Transform the ion spec response into canonical format.\n */\n\n/**\n * Authn V2 response\n * @typedef {Object} AuthnResponse\n */\n\n/**\n * @typedef {Object} AuthnResult\n * @property {Object=} user\n * @property {Object=} authenticator\n */\n\nconst isObject = x => _.isObject(x);\n\nconst isError = response => !!response.messages;\n\n/**\n * Flatten first level objects from response\n */\nconst getFirstLevelObjects = (resp) => {\n  const result = {};\n  _.each(resp, (val = {}, key) => {\n    // if key is remediation we don't do any transformation\n    if (key === 'remediation') {\n      return;\n    }\n\n    // for arrays we just want it as a top level object\n    // Example authenticators array in select-authenticator form\n    if (val.type === 'array') {\n      result[key] = {\n        value: val.value,\n      };\n    }\n\n    // for handling attributes with type object\n    if (val.type === 'object') {\n      result[key] = val.value;\n    }\n  });\n  return result;\n};\n\nconst getRemediationValues = (idx) => {\n  const remediationValues = [];\n  const hasSkipRemediationOnly =\n    idx.neededToProceed.length === 1 && idx.neededToProceed[0].name === 'skip';\n  if (_.isEmpty(idx.neededToProceed) || hasSkipRemediationOnly) {\n    // no remediation or only skip remediation with success\n    if (idx.context.success) {\n      remediationValues.push({\n        name: idx.context.success.name,\n        href: idx.context.success.href,\n        value: [],\n      });\n    } else if (idx.context.messages) {\n      // no remediation or only skip remediation with messages\n      remediationValues.push({\n        name: RemediationForms.TERMINAL,\n        // Using `value` is unnecessary as `messages` will be display via `TerminalView.showMessages`,\n        // even though might sound a little counterintuitive.\n        // The reason being is there is `BaseForm.showMessages` that is intended to handle\n        // messages generically.\n        value: [],\n      });\n    } else if (idx.context.deviceEnrollment) {\n      // no remediation or only skip remediation with messages for device enrollment state\n      // and the state is meant to be terminal state with different UI than the regular terminal view\n      remediationValues.push({\n        name: RemediationForms.DEVICE_ENROLLMENT_TERMINAL,\n        value: [],\n      });\n    }\n  }\n  return {\n    remediations: [\n      ...remediationValues,\n      ...idx.neededToProceed,\n    ]\n  };\n};\n\n/**\n * To support `idps` configuration in OIE.\n * https://github.com/okta/okta-signin-widget#openid-connect\n */\nconst injectIdPConfigButtonToRemediation = (settings, idxResp) => {\n  const widgetRemedations = idxResp.remediations;\n  const hasIdentifyRemedation = widgetRemedations.filter(r => r.name === 'identify');\n  if (hasIdentifyRemedation.length === 0) {\n    return idxResp;\n  }\n\n  const idpsConfig = settings.get('idps');\n  if (Array.isArray(idpsConfig)) {\n    const existsRedirectIdpIds = {};\n    widgetRemedations.forEach(r => {\n      if (r.name === RemediationForms.REDIRECT_IDP && r.idp) {\n        existsRedirectIdpIds[r.idp.id] = true;\n      }\n    });\n    const baseUrl = settings.get('baseUrl');\n    const stateHandle = idxResp.idx.context.stateHandle;\n    const redirectIdpRemedations = idpsConfig\n      .filter(c => !existsRedirectIdpIds[c.id]) // omit idps that are already in remediation.\n      .map(idpConfig => {\n        const idp = {\n          id: idpConfig.id,\n          name: idpConfig.text,\n        };\n        const redirectUri = `${baseUrl}/sso/idps/${idpConfig.id}?stateToken=${stateHandle}`;\n        if (idpConfig.className) {\n          idp.className = idpConfig.className;\n        }\n        return {\n          name: RemediationForms.REDIRECT_IDP,\n          type: idpConfig.type,\n          idp,\n          href: redirectUri,\n        };\n      });\n    idxResp.remediations = widgetRemedations.concat(redirectIdpRemedations);\n  }\n\n  return idxResp;\n};\n\n/**\n * IFF there is one `redirect-idp` remediation form, widget will automatically redirect to `redirect-idp.href`.\n *\n * The idea now is to reuse `success-redirect` thus converts `redirect-idp` to `success-redirect` form.\n */\nconst convertRedirectIdPToSuccessRedirectIffOneIdp = (settings, result, lastResult) => {\n  if (Array.isArray(result.remediations)) {\n    const redirectIdpRemediations = result.remediations.filter(idp => idp.name === RemediationForms.REDIRECT_IDP);\n    if (redirectIdpRemediations.length !== 1 || result.remediations.length !== 1) {\n      return;\n    }\n\n    // Direct auth clients should not redirect on the initial response\n    const isDirectAuth = settings.get('oauth2Enabled');\n    if (isDirectAuth && !lastResult) {\n      return;\n    }\n\n    const successRedirect = {\n      name: RemediationForms.SUCCESS_REDIRECT,\n      href: redirectIdpRemediations[0].href,\n      value: [],\n    };\n    result.remediations = [successRedirect];\n  }\n};\n\n/**\n * API reuses `redirect-idp` remediation form for PIV IdP and IdP Authenticator.\n * IdP Authenticator becomes outlier comparing with other Authenticators in terms of\n * using `challenge-authenticator` and `enroll-authenticator` remediation form.\n * The UX for PIV IdP is different from other idps in terms of the PIV\n * instructions view that needs to be rendered before we redirect to mtls.\n *\n * This function changes `redirect-idp` to `challenge-authenticator` or `enroll-authenticator`\n * for IdP Authenticator and changes `redirect-idp` to `piv-idp` for PIV IdP.\n */\nconst modifyFormNameForIdP = result => {\n  if (Array.isArray(result.remediations)) {\n    result.remediations.forEach(remediation => {\n      if (remediation.name === RemediationForms.REDIRECT_IDP &&\n          remediation?.relatesTo?.value?.key === AUTHENTICATOR_KEY.IDP) {\n        // idp authenticator\n        const isVerifyFlow = Object.prototype.hasOwnProperty.call(result, 'currentAuthenticatorEnrollment');\n        remediation.name = isVerifyFlow ? 'challenge-authenticator' : 'enroll-authenticator';\n      }\n      if (remediation.name === RemediationForms.REDIRECT_IDP && remediation.type === IDP_FORM_TYPE.X509) {\n        // piv idp\n        remediation.name = RemediationForms.PIV_IDP;\n      }\n    });\n  }\n};\n\nconst isFailureRedirect = (result) => {\n  const context = result.idx.context;\n  return (context.failure && context.failure.name === 'failure-redirect');\n};\n\nconst handleFailureRedirect = (settings, result) => {\n  const context = result.idx.context;\n\n  // Direct auth clients will usually prefer to display the error instead of redirecting\n  const isDirectAuth = settings.get('oauth2Enabled');\n  const alwaysRedirect = settings.get('redirect') === 'always'; // redirect option overrides default behavior\n  if (isDirectAuth && !alwaysRedirect) {\n    return;\n  }\n  \n  const failureRedirect = {\n    name: RemediationForms.FAILURE_REDIRECT,\n    href: context.failure.href,\n    value: [],\n  };\n  result.remediations = [failureRedirect];\n};\n\n/**\n * @param {Models.Settings} user configuration\n * @param {idx} idx object\n * @returns {} transformed object with flattened firstlevel objects, idx and remediations array\n * Example: {\n *  idx: {\n *    proceed: ƒ(),\n *    neededToProceed: [],\n *    actions: {cancel: ƒ()},\n *    context: {},\n *  },\n *  remediations: [],\n *  authenticators: {},\n *  authenticator: {},\n *  messages: {},\n *  deviceEnrollment: {},\n * }\n */\nconst convert = (settings, idx = {}, lastResult = null) => {\n  if (!isObject(idx.rawIdxState)) {\n    return null;\n  }\n\n  // build result object\n  const firstLevelObjects = getFirstLevelObjects(idx.rawIdxState);\n  const remediationValues = getRemediationValues(idx);\n  const result = Object.assign({},\n    firstLevelObjects,\n    remediationValues,\n    { idx }\n  );\n  \n  // transform result object\n  if (isError(result) && isFailureRedirect(result)) {\n    handleFailureRedirect(settings, result);\n  }\n\n  // Override the `result` to handle custom IdP login buttons\n  // and update the form for IdP Authenticators.\n  injectIdPConfigButtonToRemediation(settings, result);\n  modifyFormNameForIdP(result);\n\n  if (!isError(result)) { // Only redirect to the IdP if we are not in an error flow\n    convertRedirectIdPToSuccessRedirectIffOneIdp(settings, result, lastResult);\n  }\n\n  return result;\n};\n\nexport default convert;\n"],"names":["isObject","x","_","isError","response","messages","getFirstLevelObjects","resp","result","each","val","key","type","value","getRemediationValues","idx","remediationValues","hasSkipRemediationOnly","neededToProceed","length","name","isEmpty","context","success","push","href","RemediationForms","TERMINAL","deviceEnrollment","DEVICE_ENROLLMENT_TERMINAL","remediations","injectIdPConfigButtonToRemediation","settings","idxResp","widgetRemedations","hasIdentifyRemedation","filter","r","idpsConfig","get","Array","isArray","existsRedirectIdpIds","forEach","REDIRECT_IDP","idp","id","baseUrl","stateHandle","redirectIdpRemedations","c","map","idpConfig","text","redirectUri","className","concat","convertRedirectIdPToSuccessRedirectIffOneIdp","lastResult","redirectIdpRemediations","isDirectAuth","successRedirect","SUCCESS_REDIRECT","modifyFormNameForIdP","remediation","relatesTo","AUTHENTICATOR_KEY","IDP","isVerifyFlow","Object","prototype","hasOwnProperty","call","IDP_FORM_TYPE","X509","PIV_IDP","isFailureRedirect","failure","handleFailureRedirect","alwaysRedirect","failureRedirect","FAILURE_REDIRECT","convert","rawIdxState","firstLevelObjects","assign"],"mappings":"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"}