{"version":3,"file":"AppState.js","sources":["../../../../../src/v2/models/AppState.ts"],"sourcesContent":["/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Model, ModelProperty } from 'okta';\nimport Logger from 'util/Logger';\nimport {\n  FORMS_WITHOUT_SIGNOUT,\n  FORMS_WITH_STATIC_BACK_LINK,\n  FORMS_FOR_VERIFICATION,\n  AUTHENTICATOR_KEY,\n  FORMS,\n} from '../ion/RemediationConstants';\nimport { createOVOptions } from '../ion/ui-schema/ion-object-handler';\nimport { _ } from '../mixins/mixins';\nimport { executeHooksBefore, executeHooksAfter } from 'util/Hooks';\nimport Settings from 'models/Settings';\nimport Hooks from 'models/Hooks';\nimport { RecoverableError } from 'util/OAuthErrors';\n\n\nconst UNKNOWN_USER_I8N_KEY = \"idx.unknown.user\";\n/**\n * Keep track of stateMachine with this special model. Similar to `src/models/AppState.js`\n */\n\nconst local: Record<string, ModelProperty> = {\n  user: 'object',        // optional\n  currentFormName: 'string',\n  idx: 'object',\n  remediations: 'array',\n  dynamicRefreshInterval: 'number',\n  deviceFingerprint: 'string',\n  hooks: 'object' // instance of models/Hooks\n};\n\nconst derived: Record<string, ModelProperty> = {\n  authenticatorProfile: {\n    deps: ['currentAuthenticator', 'currentAuthenticatorEnrollment'],\n    fn(currentAuthenticator = { profile: undefined }, currentAuthenticatorEnrollment = { profile: undefined }) {\n      return currentAuthenticator.profile\n        || currentAuthenticatorEnrollment.profile\n        || {};\n    },\n  },\n  authenticatorKey: {\n    deps: ['currentAuthenticator', 'currentAuthenticatorEnrollment'],\n    fn(currentAuthenticator = { key: undefined }, currentAuthenticatorEnrollment = { key: undefined }) {\n      return currentAuthenticator.key\n        || currentAuthenticatorEnrollment.key\n        || '';\n    },\n  },\n  authenticatorMethodType: {\n    deps: ['currentAuthenticator', 'currentAuthenticatorEnrollment'],\n    fn(currentAuthenticator = { methods: undefined }, currentAuthenticatorEnrollment = { methods: undefined }) {\n      return currentAuthenticator.methods && currentAuthenticator.methods[0].type\n        || currentAuthenticatorEnrollment.methods && currentAuthenticatorEnrollment.methods[0].type\n        || '';\n    },\n  },\n  isPasswordRecovery: {\n    deps: ['recoveryAuthenticator'],\n    fn: function(recoveryAuthenticator = { type: undefined }) {\n      return recoveryAuthenticator?.type === 'password';\n    }\n  }\n};\n\nexport type AppStateProps = typeof local & typeof derived;\n\nexport default class AppState extends Model {\n  settings: Settings;\n  hooks: Hooks;\n  \n  constructor(attributes, options) {\n    super(attributes, options);\n    this.settings = options.settings;\n    this.hooks = options.hooks;\n  }\n\n  get<A extends Backbone._StringKey<AppStateProps>>(attributeName: A): any {\n    return Model.prototype.get.call(this, attributeName);\n  }\n\n  preinitialize(...args) {\n    this.local = local;\n    this.derived = derived;\n    Model.prototype.preinitialize.apply(this, args);\n  }\n\n  isIdentifierOnlyView() {\n    return !this.get('remediations')?.find(({ name }) => name === 'identify')\n      ?.uiSchema?.find(({ name }) => name === 'credentials.passcode');\n  }\n\n  hasRemediationObject(formName) {\n    return this.get('idx').neededToProceed.find((remediation) => remediation.name === formName);\n  }\n\n  hasActionObject(actionName) {\n    return !!this.get('idx')?.actions?.[actionName];\n  }\n\n  getRemediationAuthenticationOptions(formName) {\n    const form = this.hasRemediationObject(formName);\n    if (!form) {\n      return [];\n    }\n    const authenticator = form.value.find((value) => value.name === 'authenticator');\n    let authenticatorOptions = authenticator?.options || [];\n    // OV is a special case, so process OV options\n    authenticatorOptions = [...authenticatorOptions]; //clone it since we are changing it for OV\n    createOVOptions(authenticatorOptions);\n    return authenticatorOptions;\n  }\n\n  getActionByPath(actionPath) {\n    const paths = actionPath.split('.');\n    let targetObject;\n    if (paths.length === 1) {\n      targetObject = this.get('idx').actions;\n    } else {\n      targetObject = this.get(paths.shift());\n    }\n    // Limitation\n    // At the time of writting, action only lives in first level of state objects.\n    const actionName = paths.shift();\n    if (targetObject && _.isFunction(targetObject[actionName])) {\n      return targetObject[actionName];\n    } else {\n      return null;\n    }\n  }\n\n  getCurrentViewState() {\n    const currentFormName = this.get('currentFormName');\n\n    if (!currentFormName) {\n      return;\n    }\n\n    // didn't expect `remediations` is empty. See `setIonResponse`.\n    const currentViewState = this.get('remediations').filter(r => r.name === currentFormName)[0];\n\n    if (!currentViewState) {\n      Logger.error('Panic!!');\n      Logger.error(`\\tCannot find view state for form ${currentFormName}.`);\n      const allFormNames = this.get('remediations').map(r => r.name);\n      Logger.error(`\\tAll available form names: ${allFormNames}`);\n    }\n\n    return currentViewState;\n  }\n\n  /**\n   * Returns ui schema of the form field from current view state\n   * @param {string} fieldName\n   * @returns {}\n   */\n  getSchemaByName(fieldName) {\n    const currentViewState = this.getCurrentViewState();\n    if(currentViewState) {\n      const uiSchema = currentViewState.uiSchema;\n      return uiSchema.find(({ name }) => name === fieldName);\n    }\n  }\n\n  /**\n   * Returns the displayName of the authenticator\n   * @returns {string}\n   */\n  getAuthenticatorDisplayName() {\n    const currentAuthenticator = this.get('currentAuthenticator') || {};\n    const currentAuthenticatorEnrollment = this.get('currentAuthenticatorEnrollment') || {};\n\n    // For enrollment and certain verification flows, the currentAuthenticator object will be present.\n    // If not, we're likely in a traditional verify/challenge flow.\n    return currentAuthenticator.displayName || currentAuthenticatorEnrollment.displayName;\n  }\n\n  /**\n   * Checks to see if we're in an authenticator challenge flow.\n   * @returns {boolean}\n   */\n  isAuthenticatorChallenge() {\n    const currentFormName = this.get('currentFormName');\n    return FORMS_FOR_VERIFICATION.includes(currentFormName);\n  }\n\n  shouldReRenderView(transformedResponse) {\n    if (transformedResponse?.idx?.hasFormError) {\n      return false;\n    }\n\n    const previousRawState = this.has('idx') ? this.get('idx').rawIdxState : null;\n\n    const identicalResponse = _.isEqual(\n      _.nestedOmit(transformedResponse.idx.rawIdxState, ['expiresAt', 'refresh', 'stateHandle', 'headers']),\n      _.nestedOmit(previousRawState, ['expiresAt', 'refresh', 'stateHandle', 'headers']));\n\n    if (identicalResponse) {\n      this.set('dynamicRefreshInterval', this.getRefreshInterval(transformedResponse));\n    }\n\n    return this._isReRenderRequired(identicalResponse, transformedResponse, previousRawState);\n  }\n\n  getRefreshInterval(transformedResponse) {\n    // Only polling refresh interval has changed in the response,\n    // make sure to update the correct poll view's refresh value\n    const currentFormName = this.get('currentFormName');\n    const currentViewState = transformedResponse.remediations.filter(r => r.name === currentFormName)[0];\n    // Get new refresh interval for either: remediations, authenticator, or authenticator enrollment\n    return currentViewState.refresh ||\n      transformedResponse.currentAuthenticatorEnrollment?.poll?.refresh ||\n      transformedResponse.currentAuthenticator?.poll?.refresh;\n  }\n\n  // Sign Out link will be displayed in the footer of a form, unless:\n  // - widget configuration set hideSignOutLinkInMFA or mfaOnlyFlow to true\n  // - cancel remediation form is not present in the response\n  // - form is part of our list FORMS_WITHOUT_SIGNOUT\n  shouldShowSignOutLinkInCurrentForm(hideSignOutLinkInMFA) {\n    const idxActions = this.get('idx') && this.get('idx').actions;\n    const currentFormName = this.get('currentFormName');\n\n    return !hideSignOutLinkInMFA\n      && _.isFunction(idxActions?.cancel)\n      && !FORMS_WITHOUT_SIGNOUT.includes(currentFormName);\n  }\n\n  containsMessageWithI18nKey(keys) {\n    if (!Array.isArray(keys)) {\n      keys = [keys];\n    }\n    const messagesObjs = this.get('messages');\n    return messagesObjs && Array.isArray(messagesObjs.value)\n      && messagesObjs.value.some(messagesObj => _.contains(keys, messagesObj.i18n?.key));\n  }\n\n  containsMessageStartingWithI18nKey(keySubStr) {\n    const messagesObjs = this.get('messages');\n    return messagesObjs && Array.isArray(messagesObjs.value)\n      && messagesObjs.value.some(messagesObj => messagesObj.i18n?.key.startsWith(keySubStr));\n  }\n\n  clearAppStateCache() {\n    // clear appState before setting new values\n    const attrs = {};\n    for (const key in this.attributes) {\n      if (key !== 'currentFormName') {\n        attrs[key] = void 0;\n      }\n    }\n    this.set(attrs, Object.assign({}, { unset: true, silent: true }));\n    // clear cache for derived props.\n    this.trigger('cache:clear');\n  }\n\n  async setIonResponse(transformedResponse) {\n    const doRerender = this.shouldReRenderView(transformedResponse);\n    this.clearAppStateCache();\n    // set new app state properties\n    this.set(transformedResponse);\n\n    if (doRerender) {\n      // `currentFormName` is default to first form of remediations or nothing.\n      let currentFormName = null;\n      if (!_.isEmpty(transformedResponse.remediations)) {\n        currentFormName = transformedResponse.remediations[0].name;\n      } else {\n        Logger.error('Panic!!');\n        Logger.error('\\tNo remediation found.');\n        Logger.error('\\tHere is the entire response');\n        Logger.error(JSON.stringify(transformedResponse, null, 2));\n      }\n\n      const hook = this.hooks?.getHook(currentFormName); // may be undefined\n      await executeHooksBefore(hook);\n  \n      this.unset('currentFormName', { silent: true });\n      // make sure change `currentFormName` is last step.\n      // change `currentFormName` will re-render FormController,\n      // which may depend on other derived properties hence\n      // those derived properties must be re-computed before\n      // re-rendering controller.\n      this.set({ currentFormName });\n\n      await executeHooksAfter(hook);\n    }\n  }\n\n  setNonIdxError(error: RecoverableError<any>) {\n    this.set('remediations', [{ name: FORMS.TERMINAL }]);\n    this.set('messages', { value: [\n      {\n        message: error.errorDetails.errorSummary,\n        class: 'ERROR'\n      }\n    ]})\n    this.set('currentFormName', FORMS.TERMINAL);\n  }\n\n  getUser() {\n    return this.get('user');\n  }\n\n  _isReRenderRequired(identicalResponse, transformedResponse, previousRawState) {\n    let reRender = true;\n\n    const isPreviousStateError = this.get('idx')?.hasFormError;\n    if (isPreviousStateError && this._isChallengeAuthenticatorPoll(transformedResponse, previousRawState)) {\n      reRender = false;\n    }\n\n    if (identicalResponse) {\n      /**\n       * returns false: When new response is same as last.\n       * usually happens during polling when pipeline doesn't proceed to next step.\n       * expiresAt will be different for each response, hence compare objects without that property\n       */\n      reRender = false;\n      if (this.get('currentFormName') === 'poll') {\n        /**\n         * returns true: We want to force reRender when currentForm is poll because request has to reinitiate\n         * based on new refresh and UI has to reflect new timer.\n         * We dont technical poll here we just make a request after the specified refresh time each time\n         * we get a new response.\n         */\n        reRender = true;\n      } else if (FORMS_WITH_STATIC_BACK_LINK.includes(this.get('currentFormName'))) {\n        /**\n         * returns true: We want to force reRender if you go back to selection screen from challenge or enroll screen\n         * and re-select the same authenticator for challenge. In this case also new response will be identical\n         * to the old response.\n         */\n        reRender = true;\n      } else if (this.containsMessageWithI18nKey(UNKNOWN_USER_I8N_KEY)) {\n        /**\n         * Need to re-render or else form will be stuck in saving mode.\n         * This message is a form warning that can result in identical responses if the user enters the same\n         * username as the one in the last message warning.\n         */\n        reRender = true;\n      }\n    }\n\n    return reRender;\n  }\n\n  /**\n   * This is to account for the edge case introduced by this issue: OKTA-419210. With the current idx remediations,\n   * there's no good way to generalize this as the backend handles the authenticators for phone, sms and \n   * email differently. Although not ideal, we have to keep this check in for now until we find a better solution.\n   */\n  _isChallengeAuthenticatorPoll(transformedResponse, previousRawState) {\n    const isSameExceptMessages = _.isEqual(\n      _.nestedOmit(transformedResponse.idx.rawIdxState, ['expiresAt', 'refresh', 'stateHandle', 'headers']),\n      _.nestedOmit(previousRawState, ['expiresAt', 'refresh', 'stateHandle', 'messages', 'headers']));\n\n    const isChallengeAuthenticator = this.get('currentFormName') === 'challenge-authenticator';\n    const isCurrentAuthenticatorEmail = this.get('currentAuthenticatorEnrollment')?.key === AUTHENTICATOR_KEY.EMAIL;\n\n    return isSameExceptMessages && isChallengeAuthenticator && isCurrentAuthenticatorEmail;\n  }\n}\n"],"names":["UNKNOWN_USER_I8N_KEY","local","user","currentFormName","idx","remediations","dynamicRefreshInterval","deviceFingerprint","hooks","derived","authenticatorProfile","deps","fn","currentAuthenticator","profile","undefined","currentAuthenticatorEnrollment","authenticatorKey","key","authenticatorMethodType","methods","type","isPasswordRecovery","recoveryAuthenticator","AppState","Model","constructor","attributes","options","settings","get","attributeName","prototype","call","preinitialize","args","apply","isIdentifierOnlyView","find","name","uiSchema","hasRemediationObject","formName","neededToProceed","remediation","hasActionObject","actionName","actions","getRemediationAuthenticationOptions","form","authenticator","value","authenticatorOptions","createOVOptions","getActionByPath","actionPath","paths","split","targetObject","length","shift","_","isFunction","getCurrentViewState","currentViewState","filter","r","Logger","error","allFormNames","map","getSchemaByName","fieldName","getAuthenticatorDisplayName","displayName","isAuthenticatorChallenge","FORMS_FOR_VERIFICATION","includes","shouldReRenderView","transformedResponse","hasFormError","previousRawState","has","rawIdxState","identicalResponse","isEqual","nestedOmit","set","getRefreshInterval","_isReRenderRequired","refresh","poll","shouldShowSignOutLinkInCurrentForm","hideSignOutLinkInMFA","idxActions","cancel","FORMS_WITHOUT_SIGNOUT","containsMessageWithI18nKey","keys","Array","isArray","messagesObjs","some","messagesObj","contains","i18n","containsMessageStartingWithI18nKey","keySubStr","startsWith","clearAppStateCache","attrs","Object","assign","unset","silent","trigger","setIonResponse","doRerender","isEmpty","JSON","stringify","hook","getHook","executeHooksBefore","executeHooksAfter","setNonIdxError","FORMS","TERMINAL","message","errorDetails","errorSummary","class","getUser","reRender","isPreviousStateError","_isChallengeAuthenticatorPoll","FORMS_WITH_STATIC_BACK_LINK","isSameExceptMessages","isChallengeAuthenticator","isCurrentAuthenticatorEmail","AUTHENTICATOR_KEY","EMAIL"],"mappings":"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"}