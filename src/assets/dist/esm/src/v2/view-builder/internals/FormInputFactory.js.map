{"version":3,"file":"FormInputFactory.js","sources":["../../../../../../src/v2/view-builder/internals/FormInputFactory.ts"],"sourcesContent":["import { Collection, _, loc, createButton, InputOptions } from 'okta';\n\nimport AuthenticatorEnrollOptions from '../components/AuthenticatorEnrollOptions';\nimport AuthenticatorVerifyOptions from '../components/AuthenticatorVerifyOptions';\nimport { getAuthenticatorDataForEnroll, getAuthenticatorDataForVerification } from '../utils/AuthenticatorUtil';\nimport { AUTHENTICATOR_KEY, FORMS as RemediationForms } from '../../ion/RemediationConstants';\nimport IDP from 'util/IDP';\nimport AdminScopeList from 'v1/views/admin-consent/ScopeList';\nimport EnduserScopeList from 'v1/views/consent/ScopeList';\nimport CaptchaView from '../views/captcha/CaptchaView';\n\nconst isTextOverflowing = (text, maxWidth) => {\n  // Create a temporary element and attach it to the document so we can compare the client width to the \n  // max width allowed.\n  const elem = document.createElement('div');\n  elem.style.position = 'absolute';\n  elem.style.left = '-9999px';\n  elem.style.whiteSpace = 'nowrap';\n  elem.innerHTML = text;\n\n  document.body.appendChild(elem);\n  const result = elem.clientWidth;\n  document.body.removeChild(elem);\n\n  return result > maxWidth;\n};\n\nconst createAuthenticatorEnrollSelectView = (opt) => {\n  const optionItems = (opt.options || [])\n    .map(opt => {\n      return Object.assign({}, opt, getAuthenticatorDataForEnroll(opt));\n    });\n  return {\n    View: AuthenticatorEnrollOptions,\n    options: {\n      name: opt.name,\n      collection: new Collection(optionItems),\n    }\n  };\n};\n\nconst createAuthenticatorVerifySelectView = (opt) => {\n  let optionItems = (opt.options || []);\n  // If webauthn enrollments > 1 just show one entry with a generic namne (first) so user doesnt have to select which\n  // one to pick. eg) If there is yubikey5 and another unknown u2f key, user cannot identify that easily. We need to\n  // do this at least  until users can give authenticator enrollments custom names.\n  const authSet = new Set();\n  optionItems = optionItems.filter(opt => {\n    let isDuplicate;\n    if (opt.authenticatorKey === AUTHENTICATOR_KEY.WEBAUTHN) {\n      isDuplicate = authSet.has(opt.authenticatorKey);\n      authSet.add(opt.authenticatorKey);\n    } else if(opt.authenticatorKey === AUTHENTICATOR_KEY.CUSTOM_APP) {\n      // Filter the duplicate enrollment by id for custom app. \n      isDuplicate = authSet.has(opt?.value?.id);\n      authSet.add(opt?.value?.id);\n    }  \n    return !isDuplicate;\n  });\n  optionItems = optionItems.map(opt => {\n    return Object.assign({}, opt, getAuthenticatorDataForVerification(opt));\n  });\n  return {\n    View: AuthenticatorVerifyOptions,\n    options: {\n      name: opt.name,\n      collection: new Collection(optionItems),\n    }\n  };\n};\n\nconst createAdminScopesView = () => {\n  return {\n    View: AdminScopeList,\n  };\n};\nconst createEnduserScopesView = () => {\n  return {\n    View: EnduserScopeList,\n  };\n};\n\nconst createCaptchaView = (opt) => {\n  return {\n    View: CaptchaView,\n    options: {\n      name: opt.name,\n    }    \n  };\n};\n\nconst inputCreationStrategy = {\n  authenticatorEnrollSelect: createAuthenticatorEnrollSelectView,\n  authenticatorVerifySelect: createAuthenticatorVerifySelectView,\n  ['admin-consent']: createAdminScopesView,\n  ['consent']: createEnduserScopesView,\n  ['captcha']: createCaptchaView,\n};\n\n// TODO: move logic to uiSchemaTransformer\nconst create = function(uiSchemaObj) {\n  const strategyFn = inputCreationStrategy[uiSchemaObj.type] || _.identity;\n  return strategyFn(uiSchemaObj);\n};\n\nconst createPIVButton = (settings, appState) => {\n  const pivIdp =\n    appState.get('remediations').filter(idp => idp.name === RemediationForms.PIV_IDP);\n  if (pivIdp.length < 1) {\n    return [];\n  }\n  const pivConfig = settings.get('piv');\n  const className = pivConfig.className || '';\n  return [{\n    attributes: {\n      'data-se': 'piv-card-button',\n    },\n    className: className + ' piv-button',\n    title: pivConfig.text || loc('piv.cac.card', 'login'),\n    click: (e) => {\n      e.preventDefault();\n      appState.trigger('switchForm', RemediationForms.PIV_IDP);\n    },\n  }];\n};\n\n/**\n * Example of `redirect-idp` remediation.\n * {\n *   \"name\": \"redirect-idp\",\n *   \"type\": \"MICROSOFT\",\n *   \"idp\": {\n *      \"id\": \"0oa2szc1K1YPgz1pe0g4\",\n *      \"name\": \"Microsoft IDP\"\n *    },\n *   \"href\": \"http://localhost:3000/sso/idps/0oa2szc1K1YPgz1pe0g4?stateToken=BB...AA\",\n *   \"method\": \"GET\"\n * }\n *\n */\nconst createIdpButtons = ({ settings, appState }) => {\n  // This is the max allowable text width that we can display for IDP buttons.\n  // Generated by taking the 316px width of button minus padding-left (90 px) and padding-right (50px)\n  const MAX_IDP_BUTTON_WIDTH = 186;\n\n  const redirectIdpRemediations =\n    appState.get('remediations').filter(idp => idp.name === RemediationForms.REDIRECT_IDP);\n\n  if (!Array.isArray(redirectIdpRemediations)) {\n    return [];\n  }\n\n  // create piv button\n  const pivButton = createPIVButton(settings, appState);\n\n  //add buttons from idp object\n  const idpButtons = redirectIdpRemediations.map(idpObject => {\n    let type = idpObject.type?.toLowerCase();\n    let displayName;\n\n    if (!_.contains(IDP.SUPPORTED_SOCIAL_IDPS, type)) {\n      type = 'general-idp';\n      // OKTA-396684 - makes sure that custom idps always have a name\n      displayName = loc('customauth.sign.in.with.label', 'login', [idpObject.idp?.name]);\n    } else {\n      displayName = loc(`socialauth.${type}.label`, 'login');\n    }\n\n    const classNames = [\n      'social-auth-button',\n      `social-auth-${type}-button`,\n    ];\n\n    if (type === 'general-idp') {\n      classNames.push('no-translate');\n    }\n\n    if (idpObject.idp.className) {\n      classNames.push(idpObject.idp.className);\n    }\n\n    const button: InputOptions = {\n      attributes: {\n        'data-se': `social-auth-${type}-button`,\n      },\n      className: classNames.join(' '),\n      title: displayName,\n      href: idpObject.href,\n    };\n\n    if (isTextOverflowing(displayName, MAX_IDP_BUTTON_WIDTH)) {\n      // We add a tooltip in case the name gets truncated if too long\n      button.attributes.title = displayName;\n    }\n\n    return button;\n  });\n\n  return [...pivButton, ...idpButtons];\n};\n\nconst createCustomButtons = (settings) => {\n  const customButtons = settings.get('customButtons');\n  return customButtons.map(customButton => {\n    const button = {\n      attributes: {\n        'data-se': customButton.dataAttr\n      },\n      className: customButton.className + ' default-custom-button',\n      title: customButton.title || loc(customButton.i18nKey, 'login'),\n      click: customButton.click\n    };\n    return button;\n  });\n};\n\nconst addCustomButton = (customButtonSettings) => {\n  return createButton({\n    ...customButtonSettings,\n    className: `${customButtonSettings.className} default-custom-button button-primary`,\n  });\n};\n\nexport {\n  create,\n  createIdpButtons,\n  createCustomButtons,\n  addCustomButton,\n  isTextOverflowing\n};\n"],"names":["isTextOverflowing","text","maxWidth","elem","document","createElement","style","position","left","whiteSpace","innerHTML","body","appendChild","result","clientWidth","removeChild","createAuthenticatorEnrollSelectView","opt","optionItems","options","map","Object","assign","getAuthenticatorDataForEnroll","View","AuthenticatorEnrollOptions","name","collection","Collection","createAuthenticatorVerifySelectView","authSet","Set","filter","isDuplicate","authenticatorKey","AUTHENTICATOR_KEY","WEBAUTHN","has","add","CUSTOM_APP","value","id","getAuthenticatorDataForVerification","AuthenticatorVerifyOptions","createAdminScopesView","AdminScopeList","createEnduserScopesView","EnduserScopeList","createCaptchaView","CaptchaView","inputCreationStrategy","authenticatorEnrollSelect","authenticatorVerifySelect","create","uiSchemaObj","strategyFn","type","_","identity","createPIVButton","settings","appState","pivIdp","get","idp","RemediationForms","PIV_IDP","length","pivConfig","className","attributes","title","loc","click","e","preventDefault","trigger","createIdpButtons","MAX_IDP_BUTTON_WIDTH","redirectIdpRemediations","REDIRECT_IDP","Array","isArray","pivButton","idpButtons","idpObject","toLowerCase","displayName","contains","IDP","SUPPORTED_SOCIAL_IDPS","classNames","push","button","join","href","createCustomButtons","customButtons","customButton","dataAttr","i18nKey","addCustomButton","customButtonSettings","createButton"],"mappings":"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"}