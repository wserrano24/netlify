{"version":3,"file":"BaseResendView.js","sources":["../../../../../../../src/v2/view-builder/views/shared/BaseResendView.js"],"sourcesContent":["import { View } from 'okta';\nimport { SHOW_RESEND_TIMEOUT } from '../../utils/Constants';\nimport sessionStorageHelper from '../../../client/sessionStorageHelper';\n\nexport default View.extend({\n\n  postRender() {\n    this.showCalloutAfterTimeout();\n  },\n\n  showCalloutAfterTimeout() {\n    const timeStamp = sessionStorageHelper.getResendTimestamp();\n    if (!timeStamp) {\n      sessionStorageHelper.setResendTimestamp(Date.now());\n    }\n\n    // We keep track of a 'global' timestamp in sessionStorage because if the SIW does a re-render,\n    // we don't want to force the user to wait another 30s again to see the resend link. With this\n    // the user will wait AT MOST 30s until they see the resend link.\n    this.showMeInterval = setInterval(() => {\n      const start = sessionStorageHelper.getResendTimestamp();\n      const now = Date.now();\n      if (now - start >= SHOW_RESEND_TIMEOUT) {\n        this.$el.removeClass('hide');\n        clearInterval(this.showMeInterval);\n        sessionStorageHelper.removeResendTimestamp();\n      }\n    }, 250);\n  },\n\n  remove() {\n    View.prototype.remove.apply(this, arguments);\n    clearInterval(this.showMeInterval);\n\n    const formName = this.options.appState.get('currentFormName');\n    const resendContext = this.options.appState.get('currentAuthenticator')?.resend \n      || this.options.appState.get('currentAuthenticatorEnrollment')?.resend;\n    const didFormNameChange = this.options.model.get('formName') !== formName;\n\n    // Clear resend timeStamp whenever we change views (this means we're navigating away from the resend view)\n    if (sessionStorageHelper.getResendTimestamp()\n      && (!resendContext || didFormNameChange)) {\n      sessionStorageHelper.removeResendTimestamp();\n    }    \n  },\n});\n"],"names":["View","extend","postRender","showCalloutAfterTimeout","timeStamp","sessionStorageHelper","getResendTimestamp","setResendTimestamp","Date","now","showMeInterval","setInterval","start","SHOW_RESEND_TIMEOUT","$el","removeClass","clearInterval","removeResendTimestamp","remove","prototype","apply","arguments","formName","options","appState","get","resendContext","resend","didFormNameChange","model"],"mappings":";;;;;;;;;;;;;;;;;;;AAIA,qBAAeA,IAAI,CAACC,MAAL,CAAY;AAEzBC,EAAAA,UAFyB,EAEZ,YAAA;AACX,IAAA,IAAA,CAAKC,uBAAL,EAAA,CAAA;AACD,GAJwB;AAMzBA,EAAAA,uBANyB,EAMC,YAAA;AACxB,IAAA,MAAMC,SAAS,GAAGC,oBAAoB,CAACC,kBAArB,EAAlB,CAAA;;AACA,IAAI,IAAA,CAACF,SAAL,EAAgB;AACdC,MAAAA,oBAAoB,CAACE,kBAArB,CAAwCC,IAAI,CAACC,GAAL,EAAxC,CAAA,CAAA;AACD,KAJuB;AAOxB;AACA;;;AACA,IAAA,IAAA,CAAKC,cAAL,GAAsBC,WAAW,CAAC,MAAM;AACtC,MAAA,MAAMC,KAAK,GAAGP,oBAAoB,CAACC,kBAArB,EAAd,CAAA;AACA,MAAA,MAAMG,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAZ,CAAA;;AACA,MAAA,IAAIA,GAAG,GAAGG,KAAN,IAAeC,mBAAnB,EAAwC;AACtC,QAAA,IAAA,CAAKC,GAAL,CAASC,WAAT,CAAqB,MAArB,CAAA,CAAA;AACAC,QAAAA,aAAa,CAAC,IAAKN,CAAAA,cAAN,CAAb,CAAA;AACAL,QAAAA,oBAAoB,CAACY,qBAArB,EAAA,CAAA;AACD,OAAA;AACF,KARgC,EAQ9B,GAR8B,CAAjC,CAAA;AASD,GAxBwB;AA0BzBC,EAAAA,MA1ByB,EA0BhB,YAAA;AAAA,IAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;AACPlB,IAAAA,IAAI,CAACmB,SAAL,CAAeD,MAAf,CAAsBE,KAAtB,CAA4B,IAA5B,EAAkCC,SAAlC,CAAA,CAAA;AACAL,IAAAA,aAAa,CAAC,IAAKN,CAAAA,cAAN,CAAb,CAAA;AAEA,IAAMY,MAAAA,QAAQ,GAAG,IAAA,CAAKC,OAAL,CAAaC,QAAb,CAAsBC,GAAtB,CAA0B,iBAA1B,CAAjB,CAAA;AACA,IAAMC,MAAAA,aAAa,GAAG,CAAA,CAAA,qBAAA,GAAA,IAAA,CAAKH,OAAL,CAAaC,QAAb,CAAsBC,GAAtB,CAA0B,sBAA1B,CAAmDE,MAAAA,IAAAA,IAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAAA,CAAAA,MAAnD,gCACjB,IAAKJ,CAAAA,OAAL,CAAaC,QAAb,CAAsBC,GAAtB,CAA0B,gCAA1B,CADiB,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACjB,sBAA6DE,CAAAA,MAD5C,CAAtB,CAAA;AAEA,IAAA,MAAMC,iBAAiB,GAAG,IAAKL,CAAAA,OAAL,CAAaM,KAAb,CAAmBJ,GAAnB,CAAuB,UAAvB,CAAuCH,KAAAA,QAAjE,CAPO;;AAUP,IAAIjB,IAAAA,oBAAoB,CAACC,kBAArB,EAAA,KACE,CAACoB,aAAD,IAAkBE,iBADpB,CAAJ,EAC4C;AAC1CvB,MAAAA,oBAAoB,CAACY,qBAArB,EAAA,CAAA;AACD,KAAA;AACF,GAAA;AAxCwB,CAAZ,CAAf;;;;"}