{"version":3,"file":"ChallengeOktaVerifyFastPassView.js","sources":["../../../../../../../src/v2/view-builder/views/ov/ChallengeOktaVerifyFastPassView.js"],"sourcesContent":["import { _, createCallout } from 'okta';\nimport { BaseOktaVerifyChallengeView } from '../../internals';\nimport { getBiometricsErrorOptions } from '../../utils/ChallengeViewUtil';\n\nconst Body = BaseOktaVerifyChallengeView.extend({\n  getDeviceChallengePayload() {\n    return this.options.currentViewState.relatesTo.value.contextualData.challenge.value;\n  },\n\n  showCustomFormErrorCallout(error) {\n    const options = getBiometricsErrorOptions(error, false);\n    \n    // If not biometrics error, just show the returned error message\n    if (_.isEmpty(options)) {\n      return false;\n    }\n\n    this.showMessages(createCallout(options));\n    return true;\n  },\n});\n\nexport default Body;\n"],"names":["Body","BaseOktaVerifyChallengeView","extend","getDeviceChallengePayload","options","currentViewState","relatesTo","value","contextualData","challenge","showCustomFormErrorCallout","error","getBiometricsErrorOptions","_","isEmpty","showMessages","createCallout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAMA,IAAI,GAAGC,MAA2B,CAACC,MAA5B,CAAmC;AAC9CC,EAAAA,yBAD8C,EAClB,YAAA;AAC1B,IAAA,OAAO,IAAKC,CAAAA,OAAL,CAAaC,gBAAb,CAA8BC,SAA9B,CAAwCC,KAAxC,CAA8CC,cAA9C,CAA6DC,SAA7D,CAAuEF,KAA9E,CAAA;AACD,GAH6C;AAK9CG,EAAAA,0BAL8C,EAKnBC,UAAAA,KALmB,EAKZ;AAChC,IAAMP,MAAAA,OAAO,GAAGQ,yBAAyB,CAACD,KAAD,EAAQ,KAAR,CAAzC,CADgC;;AAIhC,IAAA,IAAIE,cAAC,CAACC,OAAF,CAAUV,OAAV,CAAJ,EAAwB;AACtB,MAAA,OAAO,KAAP,CAAA;AACD,KAAA;;AAED,IAAA,IAAA,CAAKW,YAAL,CAAkBC,aAAa,CAACZ,OAAD,CAA/B,CAAA,CAAA;AACA,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;AAf6C,CAAnC;;;;"}