{"version":3,"file":"updateAppState.js","sources":["../../../../../src/v2/client/updateAppState.ts"],"sourcesContent":["import { IdxResponse } from \"@okta/okta-auth-js\";\nimport CookieUtil from '../../util/CookieUtil';\nimport AppState from '../models/AppState';\nimport sessionStorageHelper from './sessionStorageHelper';\nimport { interactionCodeFlow } from './interactionCodeFlow';\nimport { FORMS } from \"../ion/RemediationConstants\";\nimport transformIdxResponse from '../ion/transformIdxResponse';\n\nfunction hasAuthenticationSucceeded(idxResponse: IdxResponse) {\n  // Check whether authentication has succeeded. This is done by checking the server response\n  // and seeing if either the 'success' or 'successWithInteractionCode' objects are present.\n  return idxResponse?.rawIdxState?.success || idxResponse?.rawIdxState?.successWithInteractionCode;\n}\n\n/**\n  * When \"Remember My Username\" is enabled, we save the identifier in a cookie\n  * so that the next time the user visits the SIW, the identifier field can be \n  * pre-filled with this value.\n  */\nfunction updateIdentifierCookie(appState: AppState, idxResponse: IdxResponse) {\n  const settings = appState.settings;\n  if (settings.get('features.rememberMe')) {\n    // Update the cookie with the identifier\n    const user = idxResponse?.context?.user;\n    const { identifier } = user?.value || {};\n    if (identifier) {\n      CookieUtil.setUsernameCookie(identifier);\n    }\n  } else {\n    // We remove the cookie explicitly if this feature is disabled.\n    CookieUtil.removeUsernameCookie();\n  }    \n}\n\nexport async function updateAppState(appState: AppState, idxResponse: IdxResponse): Promise<void> {\n  const settings = appState.settings;\n\n  // Only update the cookie when the user has successfully authenticated themselves \n  // to avoid incorrect/unnecessary updates.\n  if (hasAuthenticationSucceeded(idxResponse) && settings.get('features.rememberMyUsernameOnOIE')) {\n      updateIdentifierCookie(appState, idxResponse);\n  }\n\n  const lastResponse = appState.get('idx');\n  const useInteractionCodeFlow = settings.get('useInteractionCodeFlow');\n  if (useInteractionCodeFlow) {\n    if (idxResponse.interactionCode) {\n      // Although session.stateHandle isn't used by interation flow,\n      // it's better to clean up at the end of the flow.\n      sessionStorageHelper.removeStateHandle();\n      // This is the end of the IDX flow, now entering OAuth\n      const tokens = await interactionCodeFlow(settings, idxResponse);\n      // reset terminal view in case the were OAuth errors prior to successful token retrieval\n      if (appState.get('currentFormName') === FORMS.TERMINAL) {\n        appState.unset('currentFormName', { silent: true });\n      }\n      return tokens;\n    }  \n  } else {\n    // Do not save state handle for the first page loads.\n    // Because there shall be no difference between following behavior\n    // 1. bootstrap widget\n    //    -> save state handle to session storage\n    //    -> refresh page\n    //    -> introspect using sessionStorage.stateHandle\n    // 2. bootstrap widget\n    //    -> do not save state handle to session storage\n    //    -> refresh page\n    //    -> introspect using options.stateHandle\n    if (lastResponse) {\n      sessionStorageHelper.setStateHandle(idxResponse?.context?.stateHandle);\n    }\n    // Login flows that mimic step up (moving forward in login pipeline) via internal api calls,\n    // need to clear stored stateHandles.\n    // This way the flow can maintain the latest state handle. For eg. Device probe calls\n    if (appState.get('currentFormName') === FORMS.CANCEL_TRANSACTION) {\n      sessionStorageHelper.removeStateHandle();\n    }\n  }\n\n  // transform response\n  const ionResponse = transformIdxResponse(settings, idxResponse, lastResponse);\n\n  await appState.setIonResponse(ionResponse);\n}\n"],"names":["hasAuthenticationSucceeded","idxResponse","rawIdxState","success","successWithInteractionCode","updateIdentifierCookie","appState","settings","get","user","context","identifier","value","CookieUtil","setUsernameCookie","removeUsernameCookie","updateAppState","lastResponse","useInteractionCodeFlow","interactionCode","sessionStorageHelper","removeStateHandle","tokens","interactionCodeFlow","FORMS","TERMINAL","unset","silent","setStateHandle","stateHandle","CANCEL_TRANSACTION","ionResponse","transformIdxResponse","setIonResponse"],"mappings":"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"}