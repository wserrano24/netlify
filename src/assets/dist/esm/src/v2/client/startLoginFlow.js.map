{"version":3,"file":"startLoginFlow.js","sources":["../../../../../src/v2/client/startLoginFlow.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { ConfiguredFlowError, ConfigError } from 'util/Errors';\nimport { emailVerifyCallback } from './emailVerifyCallback';\nimport sessionStorageHelper from './sessionStorageHelper';\nimport { CONFIGURED_FLOW } from './constants';\nimport { IdxTransactionMeta, ProceedOptions } from '@okta/okta-auth-js';\n\nconst handleProxyIdxResponse = async (settings) => {\n  return Promise.resolve({\n    rawIdxState: settings.get('proxyIdxResponse'),\n    context: settings.get('proxyIdxResponse'),\n    neededToProceed: [],\n  });\n};\n\n/* eslint max-depth: [2, 3] */\n// eslint-disable-next-line complexity, max-statements\nexport async function startLoginFlow(settings) {\n  const authClient = settings.getAuthClient();\n  // nonce is not a top-level auth-js option, must be passed in manually\n  const { authParams } = settings.toJSON({verbose: true});\n  const nonce = settings.get('nonce') || authParams?.nonce;\n  const idxOptions: ProceedOptions = {\n    exchangeCodeForTokens: false, // we handle this in interactionCodeFlow.js\n    shouldProceedWithEmailAuthenticator: false, // do not auto-select email authenticator\n    ...(nonce && { nonce })\n  };\n\n  // Return a preset response\n  if (settings.get('proxyIdxResponse')) {\n    return handleProxyIdxResponse(settings);\n  }\n\n  if (settings.get('overrideExistingStateToken')) {\n    sessionStorageHelper.removeStateHandle();\n  }\n\n  if (settings.get('otp')) {\n    return emailVerifyCallback(settings);\n  }\n\n  if (settings.get('useInteractionCodeFlow')) {\n    const meta: IdxTransactionMeta = await authClient.idx.getSavedTransactionMeta();\n    if (!meta) {\n      // no saved transaction\n      // if the configured flow is set to `proceed`, the SIW should only continue an existing idx transaction\n      // if the SIW loads from a fresh state (there is no current transaction), throw an error\n      const flow = authClient.idx.getFlow();\n      if (flow && flow === CONFIGURED_FLOW.PROCEED) {\n        throw new ConfiguredFlowError(\n          'Unable to proceed: saved transaction could not be loaded', flow\n        );\n      }\n      // start new transaction\n      return authClient.idx.start(idxOptions); // calls interact\n    }\n\n    // continue saved transaction\n    return authClient.idx.proceed(idxOptions); // calls introspect\n  }\n\n  // Use stateToken from session storage if exists\n  // See more details at ./docs/use-session-token-prior-to-settings.png\n  const stateHandleFromSession = sessionStorageHelper.getStateHandle();\n  if (stateHandleFromSession) {\n    try {\n      const idxResp = await authClient.idx.start({\n        ...idxOptions,\n        stateHandle: stateHandleFromSession\n      });\n      const hasError = idxResp.context?.messages?.value.length > 0;\n      if (hasError) {\n        throw new Error('saved stateToken is invalid'); // will be caught in this function\n      }\n\n      // 1. abandon the settings.stateHandle given session.stateHandle is still valid\n      settings.set('stateToken', stateHandleFromSession);\n      // 2. chain the idxResp to next handler\n      return idxResp;\n    } catch {\n      // 1. remove session.stateHandle\n      sessionStorageHelper.removeStateHandle();\n      // 2. start the login again in order to introspect on settings.stateHandle\n      return startLoginFlow(settings);\n    }\n  }\n\n  // Use stateToken from options\n  const stateHandle = settings.get('stateToken');\n  if (stateHandle) {\n    return authClient.idx.start({\n      ...idxOptions,\n      stateHandle\n    });\n  }\n\n  throw new ConfigError('Set \"useInteractionCodeFlow\" to true in configuration to enable the ' +\n    'interaction_code\" flow for self-hosted widget.');\n}\n"],"names":["handleProxyIdxResponse","settings","Promise","resolve","rawIdxState","get","context","neededToProceed","startLoginFlow","authClient","getAuthClient","authParams","toJSON","verbose","nonce","idxOptions","exchangeCodeForTokens","shouldProceedWithEmailAuthenticator","sessionStorageHelper","removeStateHandle","emailVerifyCallback","meta","idx","getSavedTransactionMeta","flow","getFlow","CONFIGURED_FLOW","PROCEED","ConfiguredFlowError","start","proceed","stateHandleFromSession","getStateHandle","idxResp","stateHandle","hasError","messages","value","length","Error","set","ConfigError"],"mappings":"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"}