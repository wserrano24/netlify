{"version":3,"file":"emailVerifyCallback.js","sources":["../../../../../src/v2/client/emailVerifyCallback.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { ProceedOptions } from '@okta/okta-auth-js';\n\nexport async function emailVerifyCallback(settings) {\n  const authClient = settings.getAuthClient();\n  const idxOptions: ProceedOptions = {\n    exchangeCodeForTokens: false, // we handle this in interactionCodeFlow.js\n    shouldProceedWithEmailAuthenticator: false, // do not auto-select email authenticator\n  };\n  const meta = await authClient.idx.getSavedTransactionMeta(); // meta can load in another tab using state if it matches\n  if (!meta || !meta.interactionHandle) {\n    // Flow can not continue in this tab. Create a synthetic server response and use it to display a message to the user\n    const messages = {\n      type: 'array',\n      value: [\n        // terminal-return-otp-only-no-location.json\n        {\n          'message': 'Enter the OTP in your original browser or device.',\n          'i18n': {\n            'key': 'idx.enter.otp.in.original.tab'\n          },\n          'class': 'INFO'\n        }\n      ]\n    };\n\n    const resp = {\n      neededToProceed: [],\n      // OKTA-382410 so bad that has to leverage rawIdxState\n      rawIdxState: {\n        messages,\n      },\n      context: {\n        messages,\n      }\n    };\n    return resp;\n  }\n  \n  // Proceed using the OTP code\n  const otp = settings.get('otp');\n  const idxResponse = await authClient.idx.proceed({\n    ...idxOptions,\n    otp\n  });\n  return idxResponse;\n}\n"],"names":["emailVerifyCallback","settings","authClient","getAuthClient","idxOptions","exchangeCodeForTokens","shouldProceedWithEmailAuthenticator","meta","idx","getSavedTransactionMeta","interactionHandle","messages","type","value","resp","neededToProceed","rawIdxState","context","otp","get","idxResponse","proceed"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIO,eAAeA,mBAAf,CAAmCC,QAAnC,EAA6C;AAClD,EAAA,MAAMC,UAAU,GAAGD,QAAQ,CAACE,aAAT,EAAnB,CAAA;AACA,EAAA,MAAMC,UAA0B,GAAG;AACjCC,IAAAA,qBAAqB,EAAE,KADU;AACH;AAC9BC,IAAAA,mCAAmC,EAAE,KAFJ;;AAAA,GAAnC,CAAA;AAIA,EAAMC,MAAAA,IAAI,GAAG,MAAML,UAAU,CAACM,GAAX,CAAeC,uBAAf,EAAnB,CANkD;;AAOlD,EAAA,IAAI,CAACF,IAAD,IAAS,CAACA,IAAI,CAACG,iBAAnB,EAAsC;AACpC;AACA,IAAA,MAAMC,QAAQ,GAAG;AACfC,MAAAA,IAAI,EAAE,OADS;AAEfC,MAAAA,KAAK,EAAE;AAEL,MAAA;AACE,QAAA,SAAA,EAAW,mDADb;AAEE,QAAQ,MAAA,EAAA;AACN,UAAO,KAAA,EAAA,+BAAA;AADD,SAFV;AAKE,QAAS,OAAA,EAAA,MAAA;AALX,OAFK,CAAA;AAFQ,KAAjB,CAAA;AAcA,IAAA,MAAMC,IAAI,GAAG;AACXC,MAAAA,eAAe,EAAE,EADN;AAEX;AACAC,MAAAA,WAAW,EAAE;AACXL,QAAAA,QAAQ,EAARA,QAAAA;AADW,OAHF;AAMXM,MAAAA,OAAO,EAAE;AACPN,QAAAA,QAAQ,EAARA,QAAAA;AADO,OAAA;AANE,KAAb,CAAA;AAUA,IAAA,OAAOG,IAAP,CAAA;AACD,GAlCiD;;;AAqClD,EAAA,MAAMI,GAAG,GAAGjB,QAAQ,CAACkB,GAAT,CAAa,KAAb,CAAZ,CAAA;AACA,EAAMC,MAAAA,WAAW,GAAG,MAAMlB,UAAU,CAACM,GAAX,CAAea,OAAf,CAAuB,EAC/C,GAAGjB,UAD4C;AAE/Cc,IAAAA,GAAG,EAAHA,GAAAA;AAF+C,GAAvB,CAA1B,CAAA;AAIA,EAAA,OAAOE,WAAP,CAAA;AACD;;;;"}