{"version":3,"file":"handleConfiguredFlow.js","sources":["../../../../../src/v2/client/handleConfiguredFlow.js"],"sourcesContent":["/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n// This file attempts to mimic the behavior of a popular hack of the V1 Router, which allowed for the widget to be\n// initialized into a specific form/flow (like Register or Reset Password). To achieve this, an attempt is made to\n// call `idxState.proceed()` with a known remediation depending on the `flow` configuration to \"step\" the widget\n// (and the server's state) to the desired flow/form. The remediation is not guaranteed to be available \n// and will default to the original idx response otherwise. This depends on the Org configurations\nimport { ConfigError } from 'util/Errors';\nimport Logger from 'util/Logger';\nimport { FORMS } from '../ion/RemediationConstants';\nimport { CONFIGURED_FLOW } from './constants';\n\n\n// checks if \"desired\" remeidation is available before calling `.proceed`\n// if not available, returns original idxResponse (and logs warning)\nasync function proceedIfAvailable(idxState, remediation, flow) {\n  const rem = idxState.neededToProceed.find(item => item.name === remediation);\n  if (!rem) {\n    Logger.warn('Expected remediation not found, Org may be misconfigured for this flow');\n    return idxState;\n  }\n\n  try {\n    const nextIdxState = await idxState.proceed(remediation);\n    return nextIdxState;\n  }\n  catch (err) {\n    // catches and handles `Unknown remediation` errors thrown okta-idx-js\n    if (typeof err === 'string' && err.startsWith('Unknown remediation choice')) {\n      Logger.warn(`flow [${flow}] not valid with current Org configurations`);\n      return idxState;\n    }\n    else {\n      // do not catch non-`Unknown remediation` errors here\n      throw err;\n    }\n  }\n}\n\n// attempts to \"step into\" a specific flow by calling `.proceed` with a specific remeidation (or calls an action)\n// the \"desired\" remeidation is not guaranteed to be available, depends upon Org configurations\nasync function stepIntoSpecificIdxFlow(idxState, flow='default') {\n  switch (flow) {\n  case CONFIGURED_FLOW.DEFAULT:\n  case CONFIGURED_FLOW.PROCEED:\n  case CONFIGURED_FLOW.LOGIN:\n    // default IDX response from interact is \"Login\" page/flow. Do nothing\n    return idxState;\n\n  // step logic is handled by auth-js\n  case CONFIGURED_FLOW.REGISTRATION:\n  case CONFIGURED_FLOW.RESET_PASSWORD:\n    return idxState;\n\n  case CONFIGURED_FLOW.UNLOCK_ACCOUNT:\n    // requires: introspect -> identify-recovery -> select-authenticator-unlock-account\n    return await proceedIfAvailable(idxState, FORMS.UNLOCK_ACCOUNT, flow);\n\n  default:\n    Logger.warn(`Unknown \\`flow\\` value: ${flow}`);\n    throw new ConfigError('Invalid \"flow\" configuration');\n  }\n}\n\n// ensures the `flow` stored in the transaction meta matches the flow configuration\n// if they do not match, abandon the current (meta) flow and start a new (configured) flow\nexport async function handleConfiguredFlow(originalResp, settings) {\n  const authClient = settings.getAuthClient();\n  const configuredFlow = authClient.idx.getFlow();\n\n  // attempts to step into the desired flow\n  const idxState = await stepIntoSpecificIdxFlow(originalResp, configuredFlow);\n  return idxState;\n}\n"],"names":["proceedIfAvailable","idxState","remediation","flow","rem","neededToProceed","find","item","name","nextIdxState","proceed","err","startsWith","stepIntoSpecificIdxFlow","CONFIGURED_FLOW","DEFAULT","PROCEED","LOGIN","REGISTRATION","RESET_PASSWORD","UNLOCK_ACCOUNT","FORMS","ConfigError","handleConfiguredFlow","originalResp","settings","authClient","getAuthClient","configuredFlow","idx","getFlow"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;;AACA,eAAeA,kBAAf,CAAkCC,QAAlC,EAA4CC,WAA5C,EAAyDC,IAAzD,EAA+D;AAC7D,EAAA,MAAMC,GAAG,GAAGH,QAAQ,CAACI,eAAT,CAAyBC,IAAzB,CAA8BC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcN,WAApD,CAAZ,CAAA;;AACA,EAAI,IAAA,CAACE,GAAL,EAAU;AAER,IAAA,OAAOH,QAAP,CAAA;AACD,GAAA;;AAED,EAAI,IAAA;AACF,IAAMQ,MAAAA,YAAY,GAAG,MAAMR,QAAQ,CAACS,OAAT,CAAiBR,WAAjB,CAA3B,CAAA;AACA,IAAA,OAAOO,YAAP,CAAA;AACD,GAHD,CAIA,OAAOE,GAAP,EAAY;AACV;AACA,IAAI,IAAA,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,UAAJ,CAAe,4BAAf,CAA/B,EAA6E;AAE3E,MAAA,OAAOX,QAAP,CAAA;AACD,KAHD,MAIK;AACH;AACA,MAAA,MAAMU,GAAN,CAAA;AACD,KAAA;AACF,GAAA;AACF;AAGD;;;AACA,eAAeE,uBAAf,CAAuCZ,QAAvC,EAAiDE,IAAI,GAAC,SAAtD,EAAiE;AAC/D,EAAA,QAAQA,IAAR;AACA,IAAKW,KAAAA,eAAe,CAACC,OAArB,CAAA;AACA,IAAKD,KAAAA,eAAe,CAACE,OAArB,CAAA;AACA,IAAKF,KAAAA,eAAe,CAACG,KAArB;AACE;AACA,MAAA,OAAOhB,QAAP,CAAA;AAEF;;AACA,IAAKa,KAAAA,eAAe,CAACI,YAArB,CAAA;AACA,IAAKJ,KAAAA,eAAe,CAACK,cAArB;AACE,MAAA,OAAOlB,QAAP,CAAA;;AAEF,IAAKa,KAAAA,eAAe,CAACM,cAArB;AACE;AACA,MAAO,OAAA,MAAMpB,kBAAkB,CAACC,QAAD,EAAWoB,KAAK,CAACD,cAAjB,CAA/B,CAAA;;AAEF,IAAA;AAEE,MAAA,MAAM,IAAIE,WAAJ,CAAgB,8BAAhB,CAAN,CAAA;AAlBF,GAAA;AAoBD;AAGD;;;AACO,eAAeC,oBAAf,CAAoCC,YAApC,EAAkDC,QAAlD,EAA4D;AACjE,EAAA,MAAMC,UAAU,GAAGD,QAAQ,CAACE,aAAT,EAAnB,CAAA;AACA,EAAMC,MAAAA,cAAc,GAAGF,UAAU,CAACG,GAAX,CAAeC,OAAf,EAAvB,CAFiE;;AAKjE,EAAM7B,MAAAA,QAAQ,GAAG,MAAMY,uBAAuB,CAACW,YAAD,EAAeI,cAAf,CAA9C,CAAA;AACA,EAAA,OAAO3B,QAAP,CAAA;AACD;;;;"}