{"version":3,"file":"BaseLoginController.js","sources":["../../../../../src/v1/util/BaseLoginController.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { _, Form, Controller } from 'okta';\nimport Q from 'q';\n\nfunction getForm(controller) {\n  return _.find(controller.getChildren(), function(item) {\n    return item instanceof Form;\n  });\n}\n\nexport default Controller.extend({\n  // Ideally we should be attaching the listeners in the constructor, but because of the way\n  // we construct the FormController (this.model is generated after the BaseLoginController's\n  // constructor is called), this.model is undefined in when try to attach the events and\n  // therefore we don't listen to events for such forms. And changing the order in which we call\n  // the constructor doesn't help either (JS errors etc.). This at least guarantees that we\n  // are listening to the model events.\n  // Note - Figure out a way to call the constructor in the right order.\n  addListeners: function() {\n    // Events to enable/disable the primary button on the forms\n    this.listenTo(this.model, 'save', function() {\n      const form = getForm(this);\n      //disable the submit button on forms while making the request\n      //to prevent users from hitting rate limiting exceptions of\n      //1 per second on the auth api\n\n      const disableSubmitButton = form.disableSubmitButton;\n\n      if (disableSubmitButton && !form.disableSubmitButton()) {\n        return;\n      }\n      this.toggleButtonState(true);\n    });\n\n    this.listenTo(this.model, 'error', function() {\n      this.toggleButtonState(false);\n    });\n\n    this.addModelListeners(this.model);\n  },\n\n  addModelListeners: function(model) {\n    const setTransactionHandler = transaction => {\n      this.options.appState.set('transaction', transaction);\n    };\n\n    const transactionErrorHandler = err => {\n      this.options.appState.set('transactionError', err);\n    };\n\n    // Events to set the transaction attributes on the app state.\n    this.listenTo(model, 'setTransaction', setTransactionHandler);\n    this.listenTo(model, 'setTransactionError', transactionErrorHandler);\n\n    // For TOTP factor model\n    // TOTP model is special, its model will not be attached to a controller, but will\n    // tag along with the push factor model. We need to listen to the transaction\n    // changes on this as well (in case of the push+totp form).\n    const totpModel = model.get('backupFactor');\n\n    if (totpModel) {\n      this.listenTo(totpModel, 'setTransaction', setTransactionHandler);\n      this.listenTo(totpModel, 'setTransactionError', transactionErrorHandler);\n    }\n  },\n\n  // Override this method to delay switching to this screen until return\n  // promise is resolved. This is useful for cases like enrolling a security\n  // question, which requires an additional request to fetch the question\n  // list.\n  fetchInitialData: function() {\n    return Q();\n  },\n\n  // Override this method to prevent route navigation. This is useful for\n  // intermediate status changes that do not trigger a full refresh of the\n  // page, like MFA_ENROLL_ACTIVATE and MFA_CHALLENGE.\n  trapAuthResponse: function() {\n    return false;\n  },\n\n  toJSON: function() {\n    const data = Controller.prototype.toJSON.apply(this, arguments);\n\n    return _.extend(_.pick(this.options, 'appState'), data);\n  },\n\n  toggleButtonState: function(state) {\n    const button = this.$el.find('.button');\n\n    button.toggleClass('link-button-disabled', state).prop('disabled', state);\n  },\n\n  postRenderAnimation: function() {\n    // Event triggered after a page is rendered along with the classname to identify the page\n    // TODO: Deprecate this event in the next major version in favor of 'afterRender'\n    this.trigger('pageRendered', { page: this.className });\n\n    this.trigger('afterRender', { controller: this.className });\n  },\n});\n"],"names":["getForm","controller","_","find","getChildren","item","Form","Controller","extend","addListeners","listenTo","model","form","disableSubmitButton","toggleButtonState","addModelListeners","setTransactionHandler","transaction","options","appState","set","transactionErrorHandler","err","totpModel","get","fetchInitialData","Q","trapAuthResponse","toJSON","data","prototype","apply","arguments","pick","state","button","$el","toggleClass","prop","postRenderAnimation","trigger","page","className"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,SAASA,OAAT,CAAiBC,UAAjB,EAA6B;AAC3B,EAAOC,OAAAA,cAAC,CAACC,IAAF,CAAOF,UAAU,CAACG,WAAX,EAAP,EAAiC,UAASC,IAAT,EAAe;AACrD,IAAOA,OAAAA,IAAI,YAAYC,IAAvB,CAAA;AACD,GAFM,CAAP,CAAA;AAGD,CAAA;;AAED,0BAAeC,UAAU,CAACC,MAAX,CAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,YAAY,EAAE,YAAW;AACvB;AACA,IAAA,IAAA,CAAKC,QAAL,CAAc,IAAA,CAAKC,KAAnB,EAA0B,MAA1B,EAAkC,YAAW;AAC3C,MAAA,MAAMC,IAAI,GAAGZ,OAAO,CAAC,IAAD,CAApB,CAD2C;AAG3C;AACA;;AAEA,MAAA,MAAMa,mBAAmB,GAAGD,IAAI,CAACC,mBAAjC,CAAA;;AAEA,MAAA,IAAIA,mBAAmB,IAAI,CAACD,IAAI,CAACC,mBAAL,EAA5B,EAAwD;AACtD,QAAA,OAAA;AACD,OAAA;;AACD,MAAKC,IAAAA,CAAAA,iBAAL,CAAuB,IAAvB,CAAA,CAAA;AACD,KAZD,CAAA,CAAA;AAcA,IAAA,IAAA,CAAKJ,QAAL,CAAc,IAAA,CAAKC,KAAnB,EAA0B,OAA1B,EAAmC,YAAW;AAC5C,MAAKG,IAAAA,CAAAA,iBAAL,CAAuB,KAAvB,CAAA,CAAA;AACD,KAFD,CAAA,CAAA;AAIA,IAAKC,IAAAA,CAAAA,iBAAL,CAAuB,IAAA,CAAKJ,KAA5B,CAAA,CAAA;AACD,GA7B8B;AA+B/BI,EAAAA,iBAAiB,EAAE,UAASJ,KAAT,EAAgB;AACjC,IAAMK,MAAAA,qBAAqB,GAAGC,WAAW,IAAI;AAC3C,MAAKC,IAAAA,CAAAA,OAAL,CAAaC,QAAb,CAAsBC,GAAtB,CAA0B,aAA1B,EAAyCH,WAAzC,CAAA,CAAA;AACD,KAFD,CAAA;;AAIA,IAAMI,MAAAA,uBAAuB,GAAGC,GAAG,IAAI;AACrC,MAAKJ,IAAAA,CAAAA,OAAL,CAAaC,QAAb,CAAsBC,GAAtB,CAA0B,kBAA1B,EAA8CE,GAA9C,CAAA,CAAA;AACD,KAFD,CALiC;;;AAUjC,IAAA,IAAA,CAAKZ,QAAL,CAAcC,KAAd,EAAqB,gBAArB,EAAuCK,qBAAvC,CAAA,CAAA;AACA,IAAKN,IAAAA,CAAAA,QAAL,CAAcC,KAAd,EAAqB,qBAArB,EAA4CU,uBAA5C,EAXiC;AAcjC;AACA;AACA;;AACA,IAAA,MAAME,SAAS,GAAGZ,KAAK,CAACa,GAAN,CAAU,cAAV,CAAlB,CAAA;;AAEA,IAAA,IAAID,SAAJ,EAAe;AACb,MAAA,IAAA,CAAKb,QAAL,CAAca,SAAd,EAAyB,gBAAzB,EAA2CP,qBAA3C,CAAA,CAAA;AACA,MAAA,IAAA,CAAKN,QAAL,CAAca,SAAd,EAAyB,qBAAzB,EAAgDF,uBAAhD,CAAA,CAAA;AACD,KAAA;AACF,GAtD8B;AAwD/B;AACA;AACA;AACA;AACAI,EAAAA,gBAAgB,EAAE,YAAW;AAC3B,IAAA,OAAOC,CAAC,EAAR,CAAA;AACD,GA9D8B;AAgE/B;AACA;AACA;AACAC,EAAAA,gBAAgB,EAAE,YAAW;AAC3B,IAAA,OAAO,KAAP,CAAA;AACD,GArE8B;AAuE/BC,EAAAA,MAAM,EAAE,YAAW;AACjB,IAAA,MAAMC,IAAI,GAAGtB,UAAU,CAACuB,SAAX,CAAqBF,MAArB,CAA4BG,KAA5B,CAAkC,IAAlC,EAAwCC,SAAxC,CAAb,CAAA;AAEA,IAAA,OAAO9B,cAAC,CAACM,MAAF,CAASN,cAAC,CAAC+B,IAAF,CAAO,IAAA,CAAKf,OAAZ,EAAqB,UAArB,CAAT,EAA2CW,IAA3C,CAAP,CAAA;AACD,GA3E8B;AA6E/Bf,EAAAA,iBAAiB,EAAE,UAASoB,KAAT,EAAgB;AACjC,IAAMC,MAAAA,MAAM,GAAG,IAAKC,CAAAA,GAAL,CAASjC,IAAT,CAAc,SAAd,CAAf,CAAA;AAEAgC,IAAAA,MAAM,CAACE,WAAP,CAAmB,sBAAnB,EAA2CH,KAA3C,CAAA,CAAkDI,IAAlD,CAAuD,UAAvD,EAAmEJ,KAAnE,CAAA,CAAA;AACD,GAjF8B;AAmF/BK,EAAAA,mBAAmB,EAAE,YAAW;AAC9B;AACA;AACA,IAAKC,IAAAA,CAAAA,OAAL,CAAa,cAAb,EAA6B;AAAEC,MAAAA,IAAI,EAAE,IAAKC,CAAAA,SAAAA;AAAb,KAA7B,CAAA,CAAA;AAEA,IAAKF,IAAAA,CAAAA,OAAL,CAAa,aAAb,EAA4B;AAAEvC,MAAAA,UAAU,EAAE,IAAKyC,CAAAA,SAAAA;AAAnB,KAA5B,CAAA,CAAA;AACD,GAAA;AAzF8B,CAAlB,CAAf;;;;"}