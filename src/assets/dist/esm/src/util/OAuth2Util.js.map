{"version":3,"file":"OAuth2Util.js","sources":["../../../../src/util/OAuth2Util.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { _, loc } from 'okta';\nimport Enums from './Enums';\nimport { getTypedOAuthError, NonRecoverableError } from './OAuthErrors';\nimport Util from './Util';\nconst util = {};\n\n// https://github.com/okta/okta-auth-js#authorize-options\nconst AUTH_PARAMS = [\n  'responseType',\n  'scopes',\n  'state',\n  'nonce',\n  'idp',\n  'idpScope',\n  'display',\n  'prompt',\n  'maxAge',\n  'loginHint'\n];\nutil.AUTH_PARAMS = AUTH_PARAMS;\n\n/**\n * Get the tokens in the OIDC/OAUTH flows\n *\n * @param settings - settings model object\n * @param params - {idp: 'xxx'} for social auth\n *                 {sessionToken: 'xxx'} for okta idp\n */\nutil.getTokens = function(settings, params, controller) {\n  function success(result) {\n    settings.callGlobalSuccess(Enums.SUCCESS, result);\n  }\n\n  function error(error) {\n    const typedError = getTypedOAuthError(error);\n    if (typedError.is('terminal')) {\n      controller.model.appState.set('flashError', typedError);\n      controller.model.appState.trigger('navigate', 'signin/error');\n    } else if (typedError.is('inline')) {\n      controller.model.trigger('error', controller.model, {\n        responseJSON: {\n          errorSummary: typedError.errorDetails.errorSummary\n        }\n      });\n      controller.model.appState.trigger('removeLoading');\n    }\n\n    if (!typedError.is('terminal')) {\n      Util.triggerAfterError(controller, typedError, settings);\n    }\n\n    if (typedError instanceof NonRecoverableError) {\n      settings.callGlobalError(typedError);\n    }\n  }\n\n  const authClient = settings.getAuthClient();\n  const isAuthorizationCodeFlow = authClient.isAuthorizationCodeFlow() && !authClient.isPKCE();\n  const options = settings.toJSON({ verbose: true });\n  const getTokenOptions = {};\n\n  _.extend(\n    getTokenOptions,\n    _.pick(options, 'clientId', 'redirectUri'),\n    _.pick(options.authParams, AUTH_PARAMS),\n    params\n  );\n\n  // Extra Options for Social Idp popup window title and id_token response timeout\n  getTokenOptions.popupTitle = loc('socialauth.popup.title', 'login');\n  getTokenOptions.timeout = options.oAuthTimeout;\n\n  // Redirect flow - this can be used when logging into an external IDP, or\n  // converting the Okta sessionToken to an access_token, id_token, and/or\n  // authorization code. Note: The authorization code flow will always redirect.\n  if (options.redirect === 'always' || isAuthorizationCodeFlow) {\n    authClient.token.getWithRedirect(getTokenOptions).catch(error);\n  } else if (getTokenOptions.sessionToken) {\n    // Default flow if logging in with Okta as the IDP - convert sessionToken to\n    // tokens in a hidden iframe. Used in Single Page Apps where the app does\n    // not want to redirect away from the page to convert the token.\n    authClient.token.getWithoutPrompt(getTokenOptions).then(success).catch(error);\n  } else {\n    // Default flow if logging in with an external IDP - opens a popup and\n    // gets the token from a postMessage response.\n    authClient.token.getWithPopup(getTokenOptions).then(success).catch(error);\n  }\n};\n\nexport default util;\n"],"names":["util","AUTH_PARAMS","getTokens","settings","params","controller","success","result","callGlobalSuccess","Enums","SUCCESS","error","typedError","getTypedOAuthError","is","model","appState","set","trigger","responseJSON","errorSummary","errorDetails","Util","triggerAfterError","NonRecoverableError","callGlobalError","authClient","getAuthClient","isAuthorizationCodeFlow","isPKCE","options","toJSON","verbose","getTokenOptions","_","extend","pick","authParams","popupTitle","loc","timeout","oAuthTimeout","redirect","token","getWithRedirect","catch","sessionToken","getWithoutPrompt","then","getWithPopup"],"mappings":"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"}