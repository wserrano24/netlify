{"version":3,"file":"Bundles.js","sources":["../../../../src/util/Bundles.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport config from 'config/config.json';\nimport fetch from 'cross-fetch';\nimport country from 'nls/country.json';\nimport login from 'nls/login.json';\nimport Q from 'q';\nimport _ from 'underscore';\nimport BrowserFeatures from 'util/BrowserFeatures';\nimport Logger from 'util/Logger';\nconst STORAGE_KEY = 'osw.languages';\n\ndeclare type i18nOptions = {\n  [localeOrCountry: string]: {\n    [i18nKey: string]: string;\n  }\n}\n\ndeclare type Assets = {\n  baseUrl: string;\n  rewrite(origPath: string): string;\n}\n\n/**\n * Converts options to our internal format, which distinguishes between\n * login and country bundles.\n *\n * Example options.i18n passed in by the developer:\n * {\n *   'en': {\n *     'needhelp': 'need help override',\n *     'primaryauth.title': 'new sign in text',\n *     'country.JP' = 'Japan, Japan'\n *   }\n * }\n *\n * Parsed:\n * {\n *  'en': {\n *    'login': {\n *      'needhelp': 'need help override',\n *      'primaryauth.title': 'new sign in text',\n *    },\n *    'country': {\n *      'JP': 'Japan, Japan'\n *    }\n *  }\n * }\n */\nfunction parseOverrides(i18n) {\n  if (!i18n) {\n    return {};\n  }\n\n  const i18nWithLowerCaseKeys = {};\n\n  _.each(_.keys(i18n), function(key) {\n    i18nWithLowerCaseKeys[key.toLowerCase()] = i18n[key];\n  });\n\n  return _.mapObject(i18nWithLowerCaseKeys, function(props) {\n    const mapped = { login: {}, country: {} };\n\n    if (!_.isObject(props)) {\n      throw new Error('Invalid format for \"i18n\"');\n    }\n    _.each(props, function(val, key) {\n      const split = key.split(/^country\\./);\n\n      if (split.length > 1) {\n        mapped.country[split[1]] = val;\n      } else {\n        mapped.login[split[0]] = val;\n      }\n    });\n    return mapped;\n  });\n}\n\n// Caching: We only bundle English by default in the Sign-In Widget. Other\n// languages are loaded on demand and cached in localStorage. These languages\n// are tied to the version of the widget - when it bumps, we reset the cache.\n\nfunction getCachedLanguages() {\n  let storage = JSON.parse(localStorage.getItem(STORAGE_KEY));\n\n  if (!storage || storage.version !== config.version) {\n    storage = {\n      version: config.version,\n    };\n  }\n  return storage;\n}\n\nfunction addLanguageToCache(language, loginJson, countryJson) {\n  const current = getCachedLanguages();\n\n  current[language] = {\n    login: loginJson,\n    country: countryJson,\n  };\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(current));\n}\n\n// By default, the assets.bundleUrl is tied to the Okta CDN.\n//\n// There are two overrides available for modifying where we load the asset\n// bundles from:\n//\n// 1. assets.baseUrl\n//\n//    This is the base path the OSW pulls assets from, which in this case is\n//    the Okta CDN. Override this config option if you want to host the\n//    files on your own domain, or if you're using a new version of the\n//    widget whose language files haven't been published to the CDN yet.\n//\n// 2. assets.rewrite\n//\n//    This is a function that can be used to modify the path + fileName of\n//    the bundle we're loading, relative to the baseUrl. When called, it\n//    will pass the current path, and expect the new path to be returned.\n//    This is useful, for example, if your build process has an extra\n//    cachebusting step, i.e:\n//\n//    function rewrite(file) {\n//      // file: /labels/json/login_ja.json\n//      return file.replace('.json', '.' + md5file(file) + '.json');\n//    }\n//\n// Note: Most developers will not need to use these overrides - the default\n// is to use the Okta CDN and to use the same path + file structure the\n// widget module publishes by default.\nfunction fetchJson(bundle, language, assets) {\n  // Our bundles use _ to separate country and region, i.e:\n  // zh-CN -> zh_CN\n  const languageCode = language.replace('-', '_');\n\n  const path = assets.rewrite(encodeURI(`/labels/json/${bundle}_${languageCode}.json`));\n\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'text/plain',\n  };\n\n  const mode = 'no-cors';\n\n  return fetch(assets.baseUrl + path, {\n    method: 'GET',\n    headers,\n    mode,\n  })\n    .then(res => res.text())\n    .then(txt => JSON.parse(txt));\n}\n\nfunction getBundles(language, assets, supportedLanguages) {\n  // Two special cases:\n  // 1. Default language is already bundled with the widget\n  // 2. If the language is not in our config file, it means that they've\n  //    probably defined it on their own.\n  if (language === config.defaultLanguage || !_.contains(supportedLanguages, language)) {\n    return Q({});\n  }\n\n  //local storage does not work correctly with android web views (embeded browers)\n  //so skip the caching and just make the request to get the local info\n  const localStorageIsSupported = !BrowserFeatures.localStorageIsNotSupported();\n\n  if (localStorageIsSupported) {\n    const cached = getCachedLanguages();\n\n    if (cached[language]) {\n      return Q(cached[language]);\n    }\n  }\n\n  return Q.all([fetchJson('login', language, assets), fetchJson('country', language, assets)])\n    .spread(function(loginJson, countryJson) {\n      if (localStorageIsSupported) {\n        addLanguageToCache(language, loginJson, countryJson);\n      }\n      return { login: loginJson, country: countryJson };\n    })\n    .catch(function() {\n      // If there is an error, this will default to the bundled language and\n      // we will no longer try to load the language this session.\n      Logger.warn('Unable to load language: ' + language);\n      return {};\n    });\n}\n\nexport default {\n  login: login,\n  country: country,\n  // Courage components within the sign in widget point to courage bundle to look\n  // up i18nkeys. Since we dont have courage.properties inside the sign in widget\n  // we are pointing courage bundle to login.\n  courage: login,\n\n  currentLanguage: null,\n\n  isLoaded: function(language: string): boolean {\n    return this.currentLanguage === language;\n  },\n\n  remove: function(): void {\n    this.currentLanguage = null;\n  },\n\n  loadLanguage: function(language: string, overrides: i18nOptions, assets: Assets, supportedLanguages: string[]): Q.Promise<void> {\n    const parsedOverrides = parseOverrides(overrides);\n    const lowerCaseLanguage = language.toLowerCase();\n    return getBundles(language, assets, supportedLanguages).then(bundles => {\n      // Always extend from the built in defaults in the event that some\n      // properties are not translated\n      this.login = _.extend({}, login, bundles.login);\n      this.country = _.extend({}, country, bundles.country);\n      this.courage = _.extend({}, login, bundles.login);\n      if (parsedOverrides[lowerCaseLanguage]) {\n        _.extend(this.login, parsedOverrides[lowerCaseLanguage]['login']);\n        _.extend(this.country, parsedOverrides[lowerCaseLanguage]['country']);\n        _.extend(this.courage, parsedOverrides[lowerCaseLanguage]['login']);\n      }\n      this.currentLanguage = language;\n    });\n  },\n};\n"],"names":["STORAGE_KEY","parseOverrides","i18n","i18nWithLowerCaseKeys","_","each","keys","key","toLowerCase","mapObject","props","mapped","login","country","isObject","Error","val","split","length","getCachedLanguages","storage","JSON","parse","localStorage","getItem","version","config","addLanguageToCache","language","loginJson","countryJson","current","setItem","stringify","fetchJson","bundle","assets","languageCode","replace","path","rewrite","encodeURI","headers","Accept","mode","fetch","baseUrl","method","then","res","text","txt","getBundles","supportedLanguages","defaultLanguage","contains","Q","localStorageIsSupported","BrowserFeatures","localStorageIsNotSupported","cached","all","spread","catch","Logger","warn","courage","currentLanguage","isLoaded","remove","loadLanguage","overrides","parsedOverrides","lowerCaseLanguage","bundles","extend"],"mappings":"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"}