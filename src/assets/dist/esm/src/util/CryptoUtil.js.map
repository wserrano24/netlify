{"version":3,"file":"CryptoUtil.js","sources":["../../../../src/util/CryptoUtil.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* global Uint8Array, btoa, atob */\n\nconst fn = {};\n\n/**\n * Light weight hashing algorithm that hashes string into an integer between 0 and 4294967295\n * Not recommended for data set of size greater than 10000\n * https://www.npmjs.com/package/string-hash\n *\n * @param str the string to be hashed\n * @returns string hash of integer type\n */\nfn.getStringHash = function(str) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n  return hash >>> 0;\n};\n\n/**\n * Converts any url safe characters in a base64 string to regular base64 characters\n * @param str base64 string that might contain url safe characters\n * @returns base64 formatted string\n */\nfn.base64UrlSafeToBase64 = function(str) {\n  return str.replace(new RegExp('_', 'g'), '/').replace(new RegExp('-', 'g'), '+');\n};\n\n/**\n * Converts an ArrayBuffer object that contains binary data to base64 encoded string\n * @param bin ArrayBuffer object\n * @returns base64 encoded string\n */\nfn.binToStr = function(bin) {\n  return btoa(new Uint8Array(bin).reduce((s, byte) => s + String.fromCharCode(byte), ''));\n};\n\n/**\n * Converts base64 string to binary data view\n * @param str in base64 or base64UrlSafe format\n * @returns converted Uint8Array view of binary data\n */\nfn.strToBin = function(str) {\n  return Uint8Array.from(atob(this.base64UrlSafeToBase64(str)), c => c.charCodeAt(0));\n};\n\nexport default fn;\n"],"names":["fn","getStringHash","str","hash","i","length","charCodeAt","base64UrlSafeToBase64","replace","RegExp","binToStr","bin","btoa","Uint8Array","reduce","s","byte","String","fromCharCode","strToBin","from","atob","c"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEMA,MAAAA,EAAE,GAAG,GAAX;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,EAAE,CAACC,aAAH,GAAmB,UAASC,GAAT,EAAc;AAC/B,EAAIC,IAAAA,IAAI,GAAG,IAAX,CAAA;AACA,EAAA,IAAIC,CAAC,GAAGF,GAAG,CAACG,MAAZ,CAAA;;AAEA,EAAA,OAAOD,CAAP,EAAU;AACRD,IAAAA,IAAI,GAAIA,IAAI,GAAG,EAAR,GAAcD,GAAG,CAACI,UAAJ,CAAe,EAAEF,CAAjB,CAArB,CAAA;AACD,GAAA;;AACD,EAAOD,OAAAA,IAAI,KAAK,CAAhB,CAAA;AACD,CARD,CAAA;AAUA;AACA;AACA;AACA;AACA;;;AACAH,EAAE,CAACO,qBAAH,GAA2B,UAASL,GAAT,EAAc;AACvC,EAAOA,OAAAA,GAAG,CAACM,OAAJ,CAAY,IAAIC,MAAJ,CAAW,GAAX,EAAgB,GAAhB,CAAZ,EAAkC,GAAlC,CAAuCD,CAAAA,OAAvC,CAA+C,IAAIC,MAAJ,CAAW,GAAX,EAAgB,GAAhB,CAA/C,EAAqE,GAArE,CAAP,CAAA;AACD,CAFD,CAAA;AAIA;AACA;AACA;AACA;AACA;;;AACAT,EAAE,CAACU,QAAH,GAAc,UAASC,GAAT,EAAc;AAC1B,EAAOC,OAAAA,IAAI,CAAC,IAAIC,UAAJ,CAAeF,GAAf,CAAoBG,CAAAA,MAApB,CAA2B,CAACC,CAAD,EAAIC,IAAJ,KAAaD,CAAC,GAAGE,MAAM,CAACC,YAAP,CAAoBF,IAApB,CAA5C,EAAuE,EAAvE,CAAD,CAAX,CAAA;AACD,CAFD,CAAA;AAIA;AACA;AACA;AACA;AACA;;;AACAhB,EAAE,CAACmB,QAAH,GAAc,UAASjB,GAAT,EAAc;AAC1B,EAAOW,OAAAA,UAAU,CAACO,IAAX,CAAgBC,IAAI,CAAC,IAAA,CAAKd,qBAAL,CAA2BL,GAA3B,CAAD,CAApB,EAAuDoB,CAAC,IAAIA,CAAC,CAAChB,UAAF,CAAa,CAAb,CAA5D,CAAP,CAAA;AACD,CAFD;;;;"}